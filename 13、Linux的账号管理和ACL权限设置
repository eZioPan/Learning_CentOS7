Linux 的文件属性里只记录了 UID(user id) 和 GID(group id)
系统通过查询 /etc/passwd 将 UID 和 GID 对应的 用户名 与 群组名 显示出来



/etc/passwd 和 /etc/shadow 的详细信息可以通过 man 5 passwd 和 man 5 shadow 获取


/etc/passwd 的文件结构

eg.

[passwd 文件第一行 root 相关信息]

root:x:0:0:root:/root:/bin/bash

第 1 栏：账号名称

第 2 栏：原密码位，现已保存至 /etc/shadow 中，此位使用 x 占位

第 3 栏：UID

UID 的分配
0				系统管理员 UID （也即 root 级别）
1 ~ 999			系统内部使用的 UID
* 1 ~ 200		系统发布者自行使用的 UID
* 201 ~ 999		使用者需要系统账号时可使用的 UID
1000 ~ 60000	一般使用者的 UID ， Linux Kernel 3.10.x 中 UID 最多可以开启 2^32-1 个

第 4 栏：initial GID（账户登录时即获得该群组权限）

第 5 栏：账户说明

第 6 栏：账户主目录路径

第 7 栏：账户使用的 Shell

若想让某个账户不可以登录 shell ，可以修改这栏为 /sbin/nologin



/etc/shadow 的文件结构

eg.

[shadow 文件第一行 root 相关信息]

root:<BlahBlahBlah>::0:99999:7:::


第 1 栏：账号名称

第 2 栏：经过加密的密码，CentOS7 常用的加密手段是 SHA ，若该栏以感叹号 ! 开头，则该账户的密码是无效的，该账户也将被锁定

查询加密手段： authconfig --test | grep "hashing"

第 3 栏：最近一次密码修改的日期距离 1970 年 1 月 1 日 的天数

第 4 栏：密码在最近一次更改之后，在多少天之内不可再次更改密码

第 5 栏：密码在最近一次更改之后，在多少天之后必须重新设定密码

若不重新设定，则账号密码将会 变为过期特性
此时用户可以登录并取得 shell ，但登录后必须立刻修改密码才能继续使用

第 6 栏：密码在需要变更的几天前，系统会开始提醒用户变更密码

第 7 栏：在超过密码过期日几天之后，仍未做修改，此账号将变为无法登陆的状态

第 8 栏：账号在距离 1970 年 1 月 1 日 多少天后，将彻底失效，无法使用

第 9 栏：目前留用



/etc/group 的文件结构

[group 文件第一行 root 相关信息]

root:x:0:

第 1 栏：群组名称

第 2 栏：群组密码（很少使用），使用 x 占位

真实密码加密存储在 /etc/gshadow 文件中

第 3 栏：GID

第 4 栏：可加入这个群组的账户名

书写方法：冒号后紧跟账户名，账户名和账户名之间仅用逗号 , 隔开，不加空格
eg. root@x:0:eP,ep


注意，一个群组中可以包含多个账户，一个账户也可以加入多个群组



有效群组（effective group）和初始/主要群组（initial/primary group）

/etc/passwd 的第四栏中的 GID 对应的就是初始/主要群组，也即使用者登录系统就获取的群组


查看用户所在群组

groups [<UserName>]
返回值的第一个即为当前的有效群组
若不输入用户名，则返回当前用户所在的群组


有效群组即为当前用户在当下真实生效的群组

有效群组的切换/登录到一个新群组

newgrp [-] [<GroupName>]
- 重新创建新的环境变量，不指定的话就沿用当前的环境变量

这个命令的本质是创建一个新的 shell ，在这个 shell 中，用户具有指定的 group
能够切换的群组必须是用户已经加入群组



/etc/gshadow 的文件结构

[gshadow 文件第一行 root 相关信息]

root:::

第 1 栏：群组名称

第 2 栏：群组管理员密码，若为 ! 或为空时，则无群组管理员

第 3 栏：群组管理员账号

第 4 栏：群组包含的账户，与 /etc/group 中指定的相同



账户管理的相关命令

用户的新增

useradd [-u <UID>] [-g <初始/主要群组>] [-G <补充/次要群组>] [-m|M] [-c <说明>] [-d <主目录绝对路径>] [-s <使用的 shell>] <新账户名>
注意！在使用 useradd 添加用户之后，用户默认是被封锁的，因为还没有设定账户密码
-u, --uid<UID> 用户指定一个 UID
-g, --gid<GID或GroupName> 用户指定的初始/主要群组，这里可以使用 GID 或 群组名
-G, --groups<Group1>[,<Group2>...] 指定用户需要加入的补充/次要群组，可以使用 GID 或 群组名，多个群组之间用逗号隔开
-m, --create-home 为新用户创建目录（一般账号的默认动作）
-M 不为新用户创建目录（系统账号的默认动作）
-c, --comment<Comment> 用户的简短描述，目前标示为完整用户名
-d, --home<主目录绝对路径> 设置主目录的绝对路径
-s, --shell<SHELL> 设置该账户将启动的 shell 程序
-r 创建系统账户
-e, --expiredate<YYYY-MM-DD> 指定账户的过期日期
-f, --inactive<密码过期时间> 指定账户的密码过期天数，0 为立刻失效，-1 为永不失效


useradd 默认行为的参考文件

/etc/default/useradd

显示 useradd 的默认行为

useradd -D
-D, --defaults 查看默认行为

# 返回

GROUP=100
HOME=/home
INACTIVE=-1
EXPIRE=
SHELL=/bin/bash
SKEL=/etc/skel
CREATE_MAIL_SPOOL=yes


(1) GROUP 代表初始/主要群组的 GID 为 100，表示 users 这个群组
     但这个设置在 CentOS 中已经失效了， CentOS 默认以用户名新建一个群组，且将用户的主目录权限设置为 700

(2) HOME 代表主目录的 基准目录（BASE DIR），将在这个目录之下新建一个以账户名为名称的目录，作为使用者的主目录

(3) INACTIVE 代表密码的过期天数， 0 为立刻失效， -1 为永不失效

(4) EXPIRE 代表账户过期日期

(5) SHELL 代表使用的 shell

(6) SKEL 代表创建主目录时，要从何处拷贝初始文件至主目录中（aka.skeleton）

(7) CREATE_MAIL_SPOOL 代表是否创建邮箱



创建账户时 UID/GID/权限 等默认行为的参考文件

/etc/login.defs

文件内容

MAIL_DIR        /var/spool/mail

PASS_MAX_DAYS   99999
PASS_MIN_DAYS   0
PASS_MIN_LEN    5
PASS_WARN_AGE   7

UID_MIN          1000
UID_MAX         60000
SYS_UID_MIN       201
SYS_UID_MAX       999
GID_MIN          1000
GID_MAX         60000
SYS_GID_MIN       201
SYS_GID_MAX       999

CREATE_HOME     yes
UMASK           077
USERGROUPS_ENAB yes
ENCRYPT_METHOD SHA512


(1) MAIL_DIR 邮箱所在目录

(2) PASS_{MAX,MIN}_DAYS 密码最长、最短使用天数，对应 /etc/shadow 的 第 5 栏 / 第 6 栏

(3) PASS_MIN_LEN 密码的最短长度，现已被 PAM 模块替代，本参数已失效

(4) PASS_WARN_AGE 过期前几天开始提醒，对应 /etc/shadow 的 第 6 栏

(5) {SYS}_{UID,GID}_{MIN,MAX} 系统预留的 UID、SYS_UID、GID 的最大最小值
    在自动选取 UID GID 时，系统会搜索已经使用的 UID 和 GID，在其后加 1 ，若这个数没有超过 预留范围，则使用这个值作为 UID GID

(6) CREATE_HOME 是否创建主目录

(7) UMASK 主目录的 umask

(8) USERGROUPS_ENAB 若一个群组中不含任何一个用户，则删除这个群组；而创建新用户时，将创建一个同名的群组

(9) ENCRYPT_METHOD 密码加密手段


所以在新建一个账户的时候，系统至少会参考以下几个文件

/etc/default/useradd
/etc/login.defs
/etc/skel/*



设定或修改密码

passwd [-l|<u [-f]>] [-d] [--stdin] [-S] [-n <最少使用天数>] [-x <最多使用天数>] [-w <提前几天警告密码过期>] [-i <密码过期天数>]
--stdin 新密码来自 StdIn 或者 pipe
-l, --lock 为密码加锁，也就是为 /etc/shadow 的第 2 栏添加感叹号，此时账户就不可在本地端登录了
-u, --unlock 为密码解锁，也就是为 /etc/shadow 的第 2 蓝去除感叹号。
			 但若 /etc/shadow 的第 2 栏只有感叹号，则不会被去除
			 此时可以通过 -f, --force 来强制去除感叹号，以创建一个无密码的账户
-d, --delete 删除一个账户的密码，使之成为无密码账号
-n, --minimum 密码可使用的最小天数，在该天数之内密码不可修改
-x, --maximum 密码可使用的最大天数，在该天数之后密码必须修改
-w, --warning 提前几天提示用户密码必须修改
-i, --inactive 密码最终过期日，过了这个时间密码就完全过期，账户也应被关闭
-S, --status 罗列指定账户的密码信息

注意在 root 的权限下，密码的修改不需要输入旧密码，而且会无视 PAM 模块对密码强度的限制
在非 root 的权限下，密码修噶需要输入旧密码，也必须通过 PAM 模块对密码强度的限制


eg.
passwd -S eP
# 返回
eP PS 1969-12-31 0 99999 7 -1 (Password set, SHA512 crypt.)
上述内容对应
账户名 密码可用状态 最近修改日期 最短使用天数 最长使用天数 提前几天提醒 密码过期天数 (密码设定状态, 加密方式.)
密码可用状态 PS 可用 LK 锁定



密码的详细参数读取与修改

chage [-ldEImMW] <账户名>
(aka. change age)
-l, --list 显示账号的各种天数信息
-d, --lastday <YYYY-MM-DD或天数> 设置上一次密码修改的日期，或者距离 1970.1.1 的天数
              设置为 0 则强制要求在下次登录时修改密码
-E, --expiredate <YYYY-MM-DD或天数> 设置密码的最终过期日期，或者距离 1970.1.1 的天数
                 设置为 -1 则永不过期
-I, --inactive <锁定天数> 设置密码的在最长使用天数后的几天还未修改时，将锁定账号
-m, --mindays <最小使用天数> 密码在修改后，几天之内不可再次被修改
-M, --maxdays <最大使用天数> 密码在修改之后，几天之前必须被修改
-W, --warndays <提前提醒日期> 在密码必须被修改之前的几天提醒用户修改密码



修改用户账户的属性

usermod [-cefgls] [-d[m]] [-G[a]] [-u[o]] [-L|U] <账户名>
-c, --comment <comment> 账户的简单备注，现被当做用户全名来使用
-e, --expiredate <YYYY-MM-DD> 设置账户何时不在可以使用，若后面不跟任何时间，则取消账户失效时间设定
-f, --inactive <延期天数> 在密码到期后，还有多少天可以来修改密码，若不修改，则冻结账号
-g, --gid <GID或群组名> 指定账户的初始/主要群组，主目录下的群组将会自动修改，其他地方的群组需要手动修复
-l, --login <新用户名> 仅修改 用户名，而不会修改主目录名
-s, --shell <shell> 指定用户登录后使用的 shell，若不指定路径则使用系统默认定义的 shell
-d, --home <主目录绝对路径> 将现有的主目录路径修改至指定路径
                          若用户不存在主目录路径，则不会新建主目录路径
                          使用 -m, --move-home 将主目录内的文件移动至新主目录下
-G, --groups <Group1>[,<Group2>...] 为用户指定补充群组，可指定 GID 或 群组名
                                    可使用 -a, --append 将指定命令变为增添命令
-u, --uid <UID> 指定新的 UID，系统会自动修改 主目录 和 邮箱 的 UID，其他文件的 UID 需自行修复
                一般来说 UID 必须唯一，但可以使用 -o, --non-unique 使多个账号名指向同一个 UID
                这个操作不会参考 /etc/login.defs 的 {SYS}_UID_{MIN,MAX} 设置



删除账户

userdel [-r] <账户名>
-r, --remove 连同用户的主目录和邮件目录一同删除



id [-gGu] [-n] [-r] [<userName>/<UID>]
-g, --group  仅显示用户的有效群组 ID
-G, --groups 显示用户所在所有群组的 ID
-u, --user   仅显示有效用户（比如 su root 之后，有效用户就是 root）
-n, --name   输出名字，而非号码
-r, --real   显示账户初始的/首要的/本来的 UID 或 GID



群组的设置


群组的增加

groupadd [-g[o] <GID>] [-r] <新群组名>
-g, --gid <GID> 设置新群组的 GID，
                一般 GID 必须唯一，若要将新群组指定为以前有的 GID ，可以使用 -o, -non-unique 来强制指定
-r, --system 将新群组设置为系统群组



群组的修改

groupmod [-g[o] <GID>] [-n <新群组名>] <原群组名>
-g, --gid <GID> 设置新 GID，以该群组为 主要群组 的用户的 GID 将会自动跟新，其他用户则不会
                可以使用 -o, --non-unique 将不同群组名指向同一个 GID
                该设置不会参考 /etc/logins.defs 的设置
-n, --new-name <新群组名> 指定新的群组名



群组的删除

groupdel <群组名>

注意删除群组前，先确定该群组不是任何一个用户的 主要群组，否则该群组就无法删除



群组管理员

# root 账户的设置项目
gpasswd <群组名>
gpasswd [-A user1,user2...] [-M user3,user4...] <群组名>
gpasswd [-rR] <群组名>

若没有任何参数代表设置群组管理员密码
-A, --administrators 设置群组管理员，一个群组可以有多个管理员
-M, --member 设置群组成员
-r, --remove-password 删除群组密码，仅有群组成员可以使用 newgrp 命令切换至该群组（默认状态）
-R, --restrict 限制状态，只有具有群组密码的群组成员可以使用 newgrp 命令切换至该群组

# 群组管理员账户的设置项目
gpasswd [-ad] <user> <群组名>
-a, --add 将指定用户添加至群组中
-d, --delete 将指定用户从群组中删除



