Shell 和其他程序一样，是介于 Kernel 和用户之间的程序，可以保护 Kernel，同时提供良好的与用户交互的界面

/etc/shells 中包含了当前系统中具有的所有 shell 程序

/etc/passwd 中定义了某个用户登录后使用的 shell 是哪个



~/.bash_history 记录了 bash 命令的历史
每次在 tty 或者在 terminal 中执行了 exit 命令都会更新 bash 历史



设置命令别名
alias [-p] [别名=原命令]
-p 打印当前所有的别名


别名的存储文件
当前 ~/.bashrc
全局 /etc/bashrc



检查命令是否为 bash 的内建命令

type [-tpa] <命令>
不加参数时，若命令是 shell 内建的则显示 builtin
			若命令不是 shell 内建的则显示命令位置
-t 只有三种返回
	file 表示外部命令
	alias 表示这是一个命令的别名
	builtin 表示这是一个 shell 内建的命令
-p 若指令为外部指令，则显示完整文件名
-a 搜索 PATH 定义的位置，将所有相关的 命令/别名 都罗列出来



快速编辑命令

<Ctrl>+{u|k} 分别从光标处 向前/向后 删除指令
<Ctrl>+{a|e} 光标移动至命令的 最前端/最后端



变量名的 赋予/引用/解绑

变量名=值

变量名和值都不能直接含有空格

变量名不能以数字开头


$变量名 / ${变量名} 变量名的调用

echo $变量名 显示变量的值
echo ${变量名} 显示变量的值


使用 双引号 引用变量的时候，会输出变量的值
使用 单引号 引用变量的时候，会输出变量的名

eg.
[ep@epct ~]$ a=xyz
[ep@epct ~]$ echo "$a"
# 返回 xyz
[ep@epct ~]$ echo '$a'
# 返回 $a


$(命令) 可以将命令执行的输出值赋给另一个匿名的变量

eg.
ls -l /bin/modules/$(uname -r)/kernel/fs



