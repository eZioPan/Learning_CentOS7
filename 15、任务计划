at 单次任务计划进行

at 命令对应的系统服务为 atd

atd 的 重新启动、自动启动、查询服务状态

systemctl restart atd
systemctl enable atd
systemctl status atd



atd 所要执行的脚本，实际存放在 /var/spool/at/ 目录中



限制可执行 at 的用户

/etc/at.allow 与 /etc/at.deny

若 /etc/at.allow 存在，则只允许 /etc/at.allow 内记录的用户执行 at

若 /etc/at.allow 不存在，则查询 /etc/at.deny 内记录的用户，被记录的用户不可使用 at
若要使所有用户均可执行 at，则创建空的 /etc/at.deny 文件即可

若 /etc/at.allow 或 /etc/at.deny 均不存在，则只有 root 用户才可以执行 at



单次任务计划 at atq atrm batch

单次任务的创建
at [-f <输入文件>] [-mMldv] <计划时间>
-f 从 指定文件 而非 StdIn 读取指令
-m 当任务完成的时候，发邮件通知使用者
-M 不发送邮件给使用者
-l 等价于 atq 命令，罗列当前 at 的任务列表
-d <Job 编号> 等价于 atrm <Job 编号> 命令，删除一个或多个任务计划
-v 复杂输出
-c <Job 编号> 输出一个或多个任务的详细指令


batch 仅当系统的 平均 CPU 负载 低于某个指定的数值之后才启动需要执行的任务
默认为 0.8，可以使用 atd -l <负载值> 来设置


时间格式：

指定时间：
HH:MM
HH:MM YYYY-MM-DD
HH:MM[am|pm] [Month] [Date]

指定延时时间：
HH:MM + <num> [minutes|hours|days|weeks]

now + <num> [minutes|hours|days|weeks]

eg1. 20:30 + 4 minutes
eg2. now + 1 days

# 所有的安排只精确至分钟，也就是说，任务会在 每分钟的第 0 秒 开始执行



注意，at 在执行计划任务的时候，使用的是 at shell，并不在当前使用者所在的 bash
所以要通过 at 向当前的位置发送一个信息，需要执行如下的命令

echo "echo \"Hello \!\" > /dev/tty0" | at now + 5 minutes

将 at 的输出重导向至 使用者 bash 所在的设备，在上述代码中为 /dev/tty0



crontab 周期性执行的任务

与 at 一样 crontab 也使用 /etc/cron.allow 和 /etc/cron.deny 来控制可使用 crontab 的用户


crontab 的实际内容被记录在 /var/spool/cron/ 文件夹中，每个用户都会建立一个文件用户记录 corntab 条目
crontab 的日志文件被保存在 /var/log/cron 文件中


crontab [-u <指定用户>] [-l|-e|-r]
-u 后面的命令指向指定的用户，默认情况下，指向当前用户
-l 显示所有的 crontab 内容
-r 移除所有的 crontab 内容
-e 新增/修改/删除 某个 crontab 条目



eg. 修改 /var/spool/cron/eP 文件

[eP@ePCt ~]$ crontab -e
# 会修改 /var/spool/cron/eP 文件

# 每行都代表一个计划任务

# 写入以下内容

0 12 * * * echo "Hello" > /dev/pts/0

# pts 表示 pseudo terminal 也就是使用 SSH 远程登录的 tty 设备的名称

# 保存后，文件就生效了


以上每个片段表示

分钟 小时 日 月 周 要执行的命令

取值区间依次为 0-59 0-23 1-31 1-12 0-7

注意如果 日期 和 周几 同时指定为 非 * 的状态，则在指定的 日期 和 周几 都会 执行命令

若指定为 单一 的 周几 和 月份，则可以用 月份 或 周几的 三个字母 来替代数字
若要指定时间段则不可以使用

eg.
0 0 1 Jan Fri echo "Whoo!"



其他的可以填入的时间符号有

* 代表任何数字，也就是在该时间位上的任何时间
  比如 0 12 * * * 代表 每天、每月、每周几 的 12:00 都执行这个命令
, 代表离散的数字，也就是在该时间位上的某几个时间
  比如 20 8,10 * * * 代表 每天、每月、每周几 的 8:20 和 10:20 都执行这个命令
- 代表数字段，也就是在该时间位上的连续几个时间
  比如 30 6-12 * * * 代表 每天、每月、每周几 的 6:30 7:30 8:30 ... 12:30 都执行这个命令
/ 代表间隔，也就是在该时间位上，每间隔几个时间单位就执行
  比如 */5 * * * * 代表 每小时、每天、每月、每周几 的 每隔 5 秒都执行这个命令


特殊时间标识

部分特殊的时间可以使用简称表示

@reboot		每次重启之后 执行
@yearly		每年 1 月 1 号 0 时 0 分 执行
@annually	每年 1 月 1 号 0 时 0 分 执行
@monthly	每月 1 号 0 时 0 分 执行
@weekly		每周 第一天（周日） 0 时 0 分 执行
@daily		每天 0 时 0 分 执行
@hourly		每小时 0 分 执行


命令部分，用 % 表示换行符



/etc/crontab 系统级别的 crontab 任务

其中要注意的是 MAILTO，它会将执行的 StdOut 和 StdErr 以邮件的形式发给指定的用户


/etc/cron.d/* 程序级别的 crontab 任务

# 若有程序要执行 cron 一般会将自身的 crontab 文件放置在这个目录下

其中的 /etc/cron.d/0hourly 会调用 run-parts 执行 /etc/cron.hourly 目录下的文件

/etc/cron.hourly 下有一个叫做 0anacron 的文件，会使用另一个名为 anacron 的 程序来执行命令

这个程序的特点是，若错过执行时间， anacron 依旧会在下次执行之时，执行上次未完成的命令

除了 /etc/cron.hourly/* 是受到 cron 执行的
/etc/cron.daily/* /etc/cron.weekly/* /etc/cron.monthly/* 都是受到 anacron 执行的



注意 anacron 仅仅是一个程序，并不是一个服务， anacron 受到服务 crond 的调用


anacron [-sfnu] [-d[q]] [<job>]
-s 逐次执行指定的文件中的 anacron 条目 ，若未指定则执行 /etc/anacrontab 中的 anacron 条目
-f 无视时间戳，立刻执行指定的 anacron 条目，若未指定则执行 /etc/anacrontab 中的 anacron 条目
-n 无视等待时间，立刻执行 本执行周期 中还未执行的指定的 anacron 条目，若未指定则执行 /etc/anacrontab 中还未执行的 anacron 条目
-u 只刷新 anacron 条目的时间戳，而不实际执行命令
-d 在前台执行 anacron 条目
-q 仅在 -d 使用时使用，忽略所有的 StdErr

/etc/anacrontab 的文件格式，见文件本身，解释略
