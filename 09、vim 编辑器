vi 有三种操作模式

【1】一般命令模式（command mode）

在这种模式下，可以使用 上下左右 键来移动光标，可以删除、复制、剪切、粘贴文字

【2】编辑模式（insert mode）

在一般命令模式下按 i/I/o/O/a/A/r/R 进入编辑模式
此时可以输入文字
屏幕下方会有 INSERT 或 REPLACE 字样
按 Esc 键退出 编辑模式 至 一般命令模式

【3】命令列命令模式（command-line mode）

在一般命令模式中，输出 : 或 / 或 ? 进入这个模式
此模式下，可以对文件内容进行 搜索、替换、读取、保存、退出Vi、显示行号 等等操作


vi 会在打开、保存操作时，在屏幕底端显示 当前文件的行数与总字符数
eg.
[ep@epct ~]/bin/vi /etc/man_db.conf #注：由于 默认情况下，vi 被 vim 代替，所以需要强制制定绝对路径来启动 vi
#屏幕展示文件内容，屏幕底端显示
#"/etc/man_db.conf" [readonly] 131L, 5171C
#指的就是 该文件有 131 行（Line）， 5171 字符（Character）



# 有关于 从 putty 中登录，vim 无法正常使用 方向键 数字小键盘 退格键 的解决方法
# 参见 99、其他杂项 中的相关设置



光标移动的方法
1、上/下/左/右 键 或者 h/j/k/l 移动一个字符
2、Ctrl + {f|<PageDown>|<SpaceBar>}/{b|<PageUp>}/d/u 向下移动一页/向上移动一页/向下移动半页/向上移动半页
3、+/- 向下/上移动至非空白的一行
4、{0|<Home>}/{$|<End>} 移动到本行 行首/行尾
5、H/M/L 移动到当前屏幕的 第一行/中间行/末尾行 的第一个字符处
6、gg/G 移动到 文件 第一行/最后一行
7、如果想一次移动 n 个单位，则使用 先输入数字，在按相应的移动键就可以
8、n{<SpaceBar>|<Enter>} 向下移动指定行

# 有关为什么 vim 会使用如此奇怪的快捷键，可以参考 vi 的 Wikipedia
# https://en.wikipedia.org/wiki/Vi
# 以及 ADM-3A 键盘布局

查找
1、/[关键字] 向下查找关键字
2、?[关键字] 向上查找关键字
3、n 顺次查找下一个关键字
4、N 逆向查找下一个关键字
5、:noh/:nolsearch 取消本次搜索的高亮显示

替换
1、:<起始行号>,<结束行号>s/<原字符>/<替换字符>/g 在制定行号之间替换制定字符
2、:<起始行号>,$s/<原字符>/<替换字符>/g 在制定行号至结尾处替换制定字符
3、:<起始行号>,<结束行号>s/<原字符>/<替换字符>/gc 同1，并提示替换

剪切（删除）、粘贴
1、x/X 在光标处 向后/向前 剪切（删除）一个字符
2、{dd|yy} 删除（剪切）/复制 光标所在行的内容
3、如果想一次行对 n 行执行上述动作，先输出数字再执行上述动作
3、{d|y}1G 删除（剪切）/复制 文件第一行至当前行的内容
4、{d|y}G 删除（剪切）/复制 当前行至文件尾行的内容
5、{d|y}$ 删除（剪切）/复制 光标至当前行尾的内容
6、{d|y}0 删除（剪切）/复制 光标至当前行首的内容
7、p/P 粘贴至 下一行/上一行
8、J 将下一列合并至上一列
9、c 重复 删除（剪切） 命令，eg. 10c{h/j/k/l} 重复项指定方向删除（剪切）文件

撤销与重做
1、u 撤销一个动作
2、Ctrl+r 重做一个动作
3、. 重复上一个命令


在 command mode 中 按下 i/I/a/A/o/O/r/R 可进入 插入/替代 模式
1、i/I 在光标所在位置插入/在当前行第一个非空白字符处插入
2、a/A 在光标所在位置之后的一个字符处插入/在当前行的最后一个字符处插入
3、o/O 在光标所在行的 下一行/上一行 插入一个新行
4、r/R 替代光标所在位置的字符/从光标所在位置逐次向后替代


命令行命令模式
1、:w 向硬盘写入数据
2、:w! 强制向硬盘写入数据
3、:q 退出 vi
4、:q! 无视修改而退出 vi
5、ZZ 退出 vi，若文件未保存，则自动保存后离开
6、:w [新文件名] 将文件保存为一个新的文件
7、:r [下一个文件] 将一个新文件内容插入当前光标所在位置
8、:n1,n2 w [文件名] 将第 n1 至 n2 行存至新文件中
9、:! [systemCommand] 从 vi 的环境执行系统命令（对系统进行操作）


vi 的非正常退出恢复功能

使用 vi 编辑文件的时候，会生成 .<文件名>.swp 文件
一旦 vi 非正常退出，.swp 就会在下次使用 vi 打开相同文件时 提示错误，此时可以选择操作来恢复文件



vim 提供的新功能
1、语法高亮
2、光标位置提示
...

vim 的区块选择（Visual Block）
启动区块选择

v 以字符为单位，进行区块选择

V 以行为单位，进行区块选择

<Ctrl>+V 选择光标实际划定的区域

y/d/p 复制/删除（剪切）/粘贴



vim 同时打开多个文件

vim <file1> <file2> ...

:file 当前已打开的文件列表
:n 下一个文件
:N 上一个文件

这个操作可以让复制粘贴工作跨文件执行



vim 多屏显示

:split [filename]

:split 命令不加文件名时，默认将当前文件分屏显示
	加文件名时，载入指定文件分屏显示

:vsplit 垂直分隔

<Ctrl>+w {j|下键}/{k|上键} 连按 <Ctrl>+w 进入切换分屏模式，松开所有键，按下对应的键切换至对应的屏幕

<Ctrl>+w q 关闭当前所在的分屏，使用 :q 也可以关闭

<行数> <Ctrl>+w +/- 增加/减少当前窗口 n 行
<列数> <Ctrl>+w >/< 增加/减少当前窗口 n 列
<行数> <Ctrl>+w _ 设置当前窗口高度
<列数> <Ctrl>+w | 设置当前窗口宽度
<Ctrl>+w = 均分所有窗口


vim 自动补全功能
<Ctrl>+x -> <Ctrl>+n 根据当前文件已有内容猜测补全
<Ctrl>+x -> <Ctrl>+f 根据当前文件夹内的文件名猜测补全
<Ctrl>+x -> <Ctrl>+o 根据后缀名所代表的文件类型，猜测补全



vim 的环境设定与记录

~/.viminfo
vim 会记录最后的操作，比如反选的位置，或者停留的行号

~/.vimrc
vim 的配置

:set all
查看 vim 所有的配置项

:set
查看当前 vim 与默认配置不同的内容

:set <parm>
修改参数

常用 parm 与 含义

(no)nu 是否显示行号
(no)hlsearch 是否高亮搜寻结果
(no)autoindent 是否自动缩进
backup 自动备份（保存新文件时，自动产生 <原文件名>~ 的备份文件）
ruler 是否显示位置信息
showmode 是否显示 输入状态（INSERT、REPLACE 等等）
bg={drak/light} 切换两种预设的配色方案
ts=4 设置 tab 等于多少个 space 的长度
(no)expandtab 是否将 tab 展开为 space

:%retab 按照 (no)expandtab 和 ts 的设置将 所有行首 的 tab/space 转化为 space/tab
:%retab! 按照 (no)expandtab 和 ts 的设置将 所有 的 tab/space 转化为 space/tab
:syntax on/off 是否语法高亮



CRLF LF换行符转换

dos2unix [-k] [-o <原文件>] [-n <原文件> <转换后文件>]
unix2dos [-k] [-o <原文件>] [-n <原文件> <转换后文件>]

-k, --keepdate 使两个文件的时间统一
-n, --newfile 将转换后的文件存储为新文件
-o, --oldfile 将转换后的文件覆盖旧文件（默认）


文件编码转换

iconv --list
iconv <-f <原编码>> <-t <新编码>> <原文件>

--list 查看支持的所有编码
-f 原编码代号
-t 新编码代号
