主流 Linux 的发行版本使用的 Boot Loader 大多为 grub2

CentOS7 的开机流程概述
1. 加载 BIOS 中对于硬件的设置，并进行自我检测，接着获取第一个可开机的设备
2. 读取并执行第一个开机装置内的 boot loader（也就是 grub2 ）
3. 依据 boot loader 中的设置加载指定的 kernel 文件，kernel 开始检测硬件，并载入对应的驱动
4. 硬件驱动加载结束之后，kernel 会调用 systemd 程序，并以 default.target 定义的流程启动其他的程序
	<1> systemd 执行 sysinit.target 初始化系统，以及 basic.target 准备操作系统
	<2> systemd 执行 multi-user.target 下的本机服务和服务器服务
	<3> systemd 执行 multi-user.target 下的 /etc/rc.d/rc.local 文件
	<4> systemd 执行 multi-user.target 下的 getty.target 以及用户登录服务
	<5> systemd 执行 graphical.target 下的其他服务



BIOS,POST,MBR/GPT

开机第一步，载入 BIOS 并将 BIOS CMOS 中的硬件设置载入系统
硬件设置包含 各种硬件的工作频率、开机设备、磁盘大小和类型
					 系统时间、总线、PnP 设备、设备 IO 地址
					 CPU 的 硬件中断 指令
					 等等

接着进行 开机自我检测（POST,Power-On Self Test）
以及设置 可开机装置

通过 INT 13 中断 从可开机设备中读取 MBR 中的 Boot Loader


Boot Loader 的功能

<1> 提供启动选项，也即多重开机功能的界面
<2> 载入某系统对应的 loader，转交开机工作
<3> 也可直接载入 系统内核 来启动系统


！注： MBR 存在于硬盘的第一个扇区
	  系统的 loader 存在于系统分区的第一个扇区
	  系统的 kernel 可以存在在系统分区的任何一个扇区


kernel 的读取和系统启动

当 kernel 被载入之后，会接过 BIOS 的管理，并重新检测所有的硬件
在 Linux 中，kernel 文件一般为 /boot/vmlinuz*

eg.
[eP@ePCt ~]$ ls -F /boot

#返回

config-3.10.0-327.el7.x86_64							<= 该版本内核编译时启用的功能和模块的设置文件
grub/													<= 【已废弃】grub1 使用的文件夹
grub2/													<= grub2 使用的文件夹
initramfs-0-rescue-773a4477ef4d409cb280f237ffb5fd5a.img	<= 救援用 虚拟 文件系统 文件
initramfs-3.10.0-327.el7.x86_64.img						<= 正产启动时 使用的 虚拟 文件系统 文件
initramfs-3.10.0-327.el7.x86_64kdump.img				<= 出现问题时 使用的 虚拟 文件系统 文件
initrd-plymouth.img										<= 提供一个开机主题（也即开机动画，CentOS7 默认是 数字7 和一个 loading bar）
symvers-3.10.0-327.el7.x86_64.gz						<= 模块编译时的记录文件存档
System.map-3.10.0-327.el7.x86_64						<= 内核变量在内存地址的映射表
vmlinuz-0-rescue-773a4477ef4d409cb280f237ffb5fd5a*		<= 救援时 使用的 内核文件
vmlinuz-3.10.0-327.el7.x86_64*							<= 正常启动时 使用的 内核文件


从 vmlinuz-3.10.0-327.el7.x86_64 中我们可以看到 我们使用的 系统的版本号是  3.10.0-327.el7.x86_64


# Tip：修改开机动画
[eP@ePCt ~]$ plymouth-set-default-them --list	# 罗列当前可以使用的开机主题
[eP@ePCt ~]$ plymouth-set-default-them <theme>	# 修改为指定的开机主题
[eP@ePCt ~]$ dracut -f		# 需要等待一段时间	# 将设置更新至 boot loader


对于非必须的功能，一般来说，Linux 的发行版本 将他们设计为独立的 内核模块（module），在系统启动时，会被 内核 加载至系统中
比如 USB、SATA、SCSI 等各种磁盘驱动程序都是 内核模块

内核模块一般保存在 /lib/modules/ 目录中，且 /lib 和 / 必须处在同一个分区中



## 为什么有 initramfs-*.img 的存在 ##

！更多说明见 man initrd

只有内核在载入了 与 磁盘 相关的 内核模块 之后，才能正常的读取 磁盘上 /lib/modules 中的内容
但是 SATA 这类 磁盘 相关的 内核模块 又是放置在 磁盘上的

initramfs（Initial RAM Filesystem）文件就是来解决这个死循环的

系统的 loader 除了可以将 kernel 加载至内存中，也可以将 initramfs 载入内存中，形成一个虚拟的 文件系统
这个虚拟的文件系统中，就包含了基础的 内核模块支持，比如 USB、RAID、LVM、SCSI 等文件系统和磁盘格式的支持

在完成了基础 内核模块的 载入之后，又会帮助 系统内核 调用 systemd 来接续启动系统


lsinitrd 查看 initramfs 包含的内容【img大小、Early CPIO内容、可用命令、包含文件】

lsinitrd [-s] [-f <filename>] [-k <kernel version>] [<image> [<filename> ...]]
-s, --size 依照文件大小排列 img 中的文件
-f, --file <filename> 打印出 img 中指定 文本文件 的内容
-k, --kver <kernel version> 通过 kernel version 来查找对应的 initramfs


EG.
lsinitrd /boot/initramfs-3.10.0-327.el7.x86_64.img
# 返回

Image: /boot/initramfs-3.10.0-327.el7.x86_64.img: 27M
========================================================================
Early CPIO image
========================================================================
drwxr-xr-x   3 root     root            0 Nov 23 14:51 .
-rw-r--r--   1 root     root            2 Nov 23 14:51 early_cpio
drwxr-xr-x   3 root     root            0 Nov 23 14:51 kernel
drwxr-xr-x   3 root     root            0 Nov 23 14:51 kernel/x86
drwxr-xr-x   2 root     root            0 Nov 23 14:51 kernel/x86/microcode
-rw-r--r--   1 root     root        12288 Nov 23 14:51 kernel/x86/microcode/GenuineIntel.bin
========================================================================
Version: dracut-033-360.el7_2.1

Arguments: --kver '3.10.0-327.el7.x86_64' -f

dracut modules:
bash
nss-softokn
i18n
network
ifcfg
...(省略)...
base
fs-lib
shutdown
========================================================================
drwxr-xr-x  12 root     root            0 Nov 23 14:51 .
crw-r--r--   1 root     root       5,   1 Nov 23 14:49 dev/console
crw-r--r--   1 root     root       1,  11 Nov 23 14:49 dev/kmsg
crw-r--r--   1 root     root       1,   3 Nov 23 14:49 dev/null
lrwxrwxrwx   1 root     root            7 Nov 23 14:49 bin -> usr/bin
...(省略)...
lrwxrwxrwx   1 root     root           23 Nov 23 14:51 init -> usr/lib/systemd/systemd
...(省略)...
drwxr-xr-x   3 root     root            0 Nov 23 14:51 var/lib
drwxr-xr-x   2 root     root            0 Nov 23 14:51 var/lib/lldpad
lrwxrwxrwx   1 root     root           11 Nov 23 14:49 var/lock -> ../run/lock
lrwxrwxrwx   1 root     root            6 Nov 23 14:49 var/run -> ../run
========================================================================


initrmafs 文件的结构为 Early_CPIO.img + ramfs.img.gz

可以通过以下步骤解开

<0> 将 <initramfs>.img 从 /boot 文件夹下拷贝出来

<1> 使用 file 检测 <imitramfs>.img 的文件类型
file <initramfs>.img
# 返回
<initramfs>.img: ASCII cpio archive

<2> 使用 cpio 来提取 Early_CPIO.img 中的文件，并取得 Early_CPIO.img 的大小
cpio -i -d --no-absolute-filenames -I <initramfs>.img
# 返回
<n> blocks

<3> 使用 dd 排除前 <n> blocks 的数据，并生成新的文件
dd if=<initramfs>.img of=<ramfs>.gz skip=<n>

<4> 使用 file 检测 <ramfs>.gz 的文件类型
file <ramfs>.gz
# 返回
<ramfs>.gz: gzip compressed data, from Unix,

<5> 使用 gunzip 解压 <ramfs>.gz
gunzip <ramfs>.gz
# 返回
<ramfs> 文件

<6> 使用 file 检查 <ramfs> 的文件类型
file <ramfs>
# 返回
<ramfs>: ASCII cpio archive

<7> 使用 cpio 提取文件
cpio -i -d --no-absolute-filenames -I <ramfs>

此时就能看到完整的文件内容了



在 内核加载、硬件检测结束、基础内核模块加载结束之后，此时硬件就就绪了，会调用 systemd 来执行软件部分的准备

systemd 则会根据 /etc/systemd/system/default.target 来执行后续的启动



通过 systemctl list-dependencies graphical.target 的输出，我们可以大致的判断
CentOS7 的 systemd 开机流程大致为

1、local-fs.target + swap.target：挂载 /etc/fstab 内所定义的文件系统挂载设置
2、sysinit.target：检测硬件，加载 内核模块
3、basic.target：加载周边设备的 内核模块，并启动 防火墙 等服务
4、multi-user.target 下的 一般 系统服务 和 网络服务
5、图形界面服务和 gdm.service 等服务



用于 初始化系统 的 sysinit.target

其中的内容可以分为如下几类

1、特殊文件系统设备的挂载：包括 dev-hugepages.mount dev-mqueue.mount 等
						主要和 大内存页 相关
						挂载成功后，会在 /dev 下建立 /dev/hugepages/ 和 /devmqueue/ 等目录

2、特殊文件系统的启动：包括 RAID、ISCSI、LVM、nultipath 等等

3、开机信息传递和开机动画： plymouthd 服务和 plymouth 命令

4、日志记录： systemd-journald 服务

5、其他 内核模块 的载入：通过 /etc/modules-load.d/*.conf 文件

6、其他 内核 参数设置：包括 /etc/sysctl.conf 和 /etc/sysctl.d/*.conf

7、启动随机数生成器

8、设置 console 使用的字体

9、动态设备管理器：udevd 服务，将 设备 动态的映射为某个 文件，方便系统使用



用于 建立基础的操作系统 的 basic.target

1、加载 alsa 音频驱动

2、加载 firewalld 防火墙服务

3、加载 CPU 微指令集

4、启动与设置 文件 的 SELinux security context
   当 SELinux 由 disable 变为 enable 时，或 系统管理员强制刷新 security context 的时候就会使用

5、到目前为止的 开机日志 全部写入 /var/log/dmesg 文件中

6、依据 /etc/sysconfig/modules/*.modules 和 /etc/rc.modules 加载管理员指定的 内核模块

7、加载 systemd 的 timer 功能



systemd 启动 multi-user.target 下的服务

大多数需要被 multi-user.target 启动的服务，都放置于下面的文件夹中
/etc/systemd/system/multi-user.target.wants/


systemd 为了兼容旧的 SystemV 的启动脚本，有一个 rc-local.service 服务来负责 SystemV 的内容
rc-local.service 会自动检测 .etc/rc.d/rc.local 的可执行权限（x），若具有可执行权限，则会执行其中内容


multi-user.target 还会提供 tty 与 登录界面，与之相关的服务为
getty.target 和 systemd-logind.service systemd-user-sessions.service 等



systemd 启动 graphical.target 下的服务

包括 用户管理服务 和 图形界面管理器（gdm.service）



启动时会使用的配置文件

/etc/sysconfig/*
/etc/modules-load.d/*.conf
/etc/modprobe.d/*.conf


/etc/sysconfig/*

systemd 有自己的配置文件，但为了和老的 SystemV 相兼容，依旧会读取位于 /etc/sysconfig/ 文件夹下的配置文件
其中比较重要的几个配置文件

authconfig
	规定用户验证机制，不要手动修改，使用 authconfig-tui 命令来调整

cpupower
	启动 cpupower.service 服务的配置文件，这个服务用于定义 CPU 的节能/性能状态

firewalld, iptables-config, ip6tables-config
	防火墙 相关的参数

network-scripts/
	网卡设置


/etc/modules-load.d/*.conf

开机时，需要载入的 模块文件 列表，此 conf 文件每行写入一个 模块的名称
以 # 或 ; 开头的行为注释行
/etc/modules-load.d/*.conf 优先于 /run/modules-load.d/*.conf 优先于 /usr/lib/modules-load.d/*.conf


/etc/modprobe.d/*.conf

modprobe 命令可以使用的配置文件，开机时，系统也会调用 modprobe 来 设置模块
/etc/modprobe.d/*conf 优先于 /run/modprobe.d/*conf 优先于 /usr/lib/modprobe.d/*conf
以 # 开头的行都被认为是 注释行
以 \ 结尾的行会延续至下一行

关键字

alias <别名> <模块名>
	设置模块的别名，这样 modprobe 就可以使用 modprobe <别名> 来启动模块
	<别名> 部分可以使用 Shell 使用的通配符，形如 alias my-mod* long-mod-name
	可使用 modprobe my-mod-blahblah 启动相关的模块
	一个模块内部也会带有别名，一般用于指明它们支持的硬件
	而 modprobe.d/*.conf 的 alias 会 override 模块内部的 别名
	不可以 alias <别名的别名> <别名>

blacklist <模块名>
	忽略 指定的 模块名 和 模块内部别名 对应的模块
	当出现 两个模块 支持 同一个硬件，或者 一个模块 支持了一个它并不支持的硬件
	就使用这个字段来屏蔽这个模块

install <模块名> <命令...>
	当使用 modprobe <模块名> 的 时候
	使用 自定义的命令行 运行 模块，而不用 系统默认 的 加载方式
	比如，使用 mod2 替换 mod1 成为加载项目
	可以使用 install mod1 /sbin/modprobe mod2; /sbin/modprobe --ignore-install mod1 完成

options <模块名> <选项...>
	每当模块被载入（无论是直接载入还是被依赖载入）内核的时候，就将这些 选项 传入模块中
	无论是从 option 定义的还是从 alias 定义的或是 从 命令行 定义的 选项，都会一并传入 模块

remove <模块名> <命令...>
	当使用 modprobe -r <模块名> 的 时候
	使用 自定义的命令行 卸载 模块，而不用 系统默认 的 卸载方式

softdep <模块名> pre: <模块...> post: <模块...>
	对于指定的 模块，可选的 一同 加载/卸载 的模块
	pre: 和 post: 仅定义这些可选的模块是在 指定模块 之前或之后 被执行了和 指定模块同样的命令
	对于相同的模块 softdep 优先于 install 和 remove



内核 与 内核模块 文件的 存放位置

内核：		/boot/vmlinuz 或 /boot/vmlinuz-<内核版本号>
RAM Disk：	/boot/initramfs 或 /boot/initramfs-<内核版本号>
内核模块：	/lib/modules/<内核版本号>/kernel
内核源码：	/usr/src/kernels/ 或 /usr/src/linux （默认不安装）

若内核被成功加载，则会有以下的内容被记录下来

内核版本：	/proc/version
内核调试：	/proc/sys/kernel/


若出现新的硬件无法被支持，则可使用以下两种方式解决

1、直接将硬件驱动写入内核源码，并重新编译内核
2、将硬件驱动编译为模块，在开机时载入内核



内核模块和依赖性


内核模块存放在 /lib/modules/<内核版本>/kernel/ 目录中

arch	与硬件平台相关的内容，比如 CPU 的构架
crypto	内核支持的加密技术，比如 md5 或者 des 等等
drivers	硬件驱动程序
fs		内核支持的文件系统
lib		常用的函数
net		与网络设置相关的配置，以及基础防火墙（net/ipv4/netfilter/*）配置
sound	与声音相关的模块


模块依赖性记录文件

/lib/modules/<内核版本>/modules.dep

Linux 的内核模块可以提供一些服务（被称为 symbols）供其他模组使用
若一个 模块的 symbol 被另一个 模块使用，则可以确定，后者是依赖于前者的

depmod 自动解析内核模块的依赖性

depmod 命令会自动读取 /lib/modules/<version>/ 下的内核，并分析它们提供的 symbol 以及它们需要的 symbol
默认情况下写入 modules.dep 文件中，并生成一个 哈希二进制的版本 modules.dep.bin。
如果在 depmod 命令后追加了 模块的路径，则只分析该模块的依赖关系（不常用）
同时 depmod 也会生成一个 modules.symbols 文件，来记录当前模块可以提供的 symbols，以及一个 哈希二进制版本 modules.symbols.bin
若一个模块支持特殊的设备名（devname），将在启动时被置入 /dev/ 目录下，则 depmod 会创建一个 modules.<devname> 的文件
如果内核版本 <version> 被指定，则对指定的内核模块进行分析，而非使用当前的内核模块

depmod [-b <basedir>] [-e] [-E <Module.symvers>] [-F <System.map>] [-n] [-v] [-A]
	   [-P <prefix>] [-w] [version]

depmod [-e] [-E <Module.symvers>] [-F <System.map>] [-m] [-n] [-v] [-P <prefix>] [-w]
	   [version] [filename...]

-a, --all
	检查所有的模块，若没有指定模块文件名，则此参数默认启用

-A, --quick
	先检查是否有模块比 modules.dep 文件要新，若没有，则不会执行任何其他的操作

-b <basedir>, --basedir <basedir>
	若 模块 不在 /lib/modules/<version> 文件夹下
	则指定一个 父级目录，使 modprobe 从指定的目录读取 模块
	此时， <basedir> 会自动从 modules.dep 中的每个条目中去除
	以方便以后将 模块 移动至正常的目录下后，不用重新执行 depmod

-C, --config <文件 或 目录>
	重新指定配置文件或配置文件所在目录
	默认在 /etc/depmod.d/ 下

-e, --errsyms
	可与与 -F 连用
	若有任何 模块 需要的 symbol 未被任何 模块 或 内核 提供，它就会提示错误

-E, --symvers <Module.symvers>
	可与 -e 连用
	若有任何 模块 提供的 symbol 的版本与 内核记录在 Module.symvers 的不同，它就会提示错误
	它与 -F 互不兼容

-F, --filesyms <System.map>
	当编译内核时，使用指定的 System.map
	与 -e 连用时，可以报告未解析的 symbol
	它与 -E 互不兼容

-n， --show， --dry-run
	将生成的 modules.dep 和其他各种 map 文件 输出至 StdOut 而非写入 模块文件夹中

-P <prefix>
	有些构架会在 symbol 前写入一个无关的字符。
	这里可以定义个字符来跳过它

-v, --verbose
	depmod 会打印所有的 模块 需要的 symbol，以及提供这个 symbol 的 模块 的文件名

-w
	对重复的 依赖、别名、 symbol 版本 等作出警告



lsmod 罗列当前内核中的模块的状态
返回值包含
模块的名称 大小 被依赖的数量 被依赖的模块名



modinfo 显示一个 内核模块的信息

模块的文件名 虽然不是 模块的属性（field），但也会显示为模块的一个“属性”

modinfo [-0] [-F <field>] [-k <kernel>] [modulename|filename...]

-F, --field <field>
	仅显示 模块的 指定属性
	属性名 是大小写敏感的
	常见的属性名包括
	 author, description, license, parm, depends, alias

-b <basedir>, --basedir <basedir>
	模块的根目录
	默认为 /

-k <kernel>
	用指定的 内核版本 而非当前使用的 内核版本

-0, --null
	使用 NUL 而非 <new line> 来区分 属性值



modprobe 从 内核 中添加或移除 模块

modprobe 会从 /etc/modprobe.d/ 下读加载配置文件

可以在命令行中使用 <module>.<option> 以及 modprobe.blacklist=<module> 来传入附加的参数

modprobe 需要 depmod 生成的 modules.dep.bin 文件

modprobe [-v] [-V] [-C <config-file>] [-n] [-i] [-q] [-b] [modulename] [module parm]

modprobe [-r] [-v] [-n] [-i] [modulename...]

modprobe [-c]

modprobe [--dump-modversions] [filename]

-a, --all
	将命令行上输入的每个 模块 都加载进内核中

-b, --use-blacklist
	让 modprobe 命令参考 *.conf 中的 blacklist

-C, --config
	指定配置文件目录的位置（默认为 /etc/modprobe.d/）
	这个参数会以 全局变量 MODPROBE_OPTIONS 的身份传入 配置文件的 install 和 remove 字段中

-c, --showconfig
	从配置文件目录 显示 有效的配置文件

--dump-modversions
	答应给出的 模块文件 所需要的 模块以及它们的版本号
	常用于发行商

-d, --dirname
	模块的根目录，默认为 /

--first-time
	默认情况下，如果要求 modprobe 载入一个已经载入的模块，或卸载一个已经卸载的模块
	modprobe 会正常退出
	但如果指定这个参数， modprobe 就会返回失败

--force-vermagic
	【危险参数，慎用】
	每个模块都包含一小段重要字符串，比如，内核版本和编译器版本
	若在载入模块时，内核返回了 version magic 不匹配，可以用这个参数 屏蔽此类错误
	这会传递给参数所在命令行指定的 模块和别名，以及他们的 依赖模组

--force-modversion
	【危险参数，慎用】
	当模组编译时使用了 CONFIG_MODVERSIONS 时，模组需要的版本号和提供的版本号就会被创建
	若在载入模块时，内核返回了 接口版本 不匹配，可以用这个参数 屏蔽此类错误
	这会传递给参数所在命令行指定的 模块和别名，以及他们的 依赖模组

-f, --force
	【危险参数，慎用】
	忽略所有的 版本不合 错误，等同于 连用 --force-vermagic 和 --force-modersion
	这会传递给参数所在命令行指定的 模块和别名，以及他们的 依赖模组

-i, --ignore-install, --ignore-remove
	使 modprobe 暂时忽略 配置文件的 install 和 remove 字段

-n, --dry-run, --show
	仅将要执行的操作输出至屏幕上，而不实际执行它
	和 -v 连用用于查错

-q, --quiet
	当 modprobe 执行错误时，不会提示错误信息，但在执行完毕之后会返回一个非 0 的返回值

-R, --resolve-alias
	将符合该 别名 的 所有 模块 全部罗列出来

-r, --remove
	将 模块 从 内核 中移除，若 模块 所依赖的模块 没有被其他模块使用，则会一同移除

-S, --set-version
	指定 要操作的内核版本

--show-depends
	罗列出指定的 模块/别名 自己和它所依赖的模块。
	若一行以 insmod 开头，则它将被一同包括进 initramfs 文件中
	若一个行以 install 开头，则它是配置文件中 install 字段定义的

-s, --syslog
	使用 syslog 而非 StdErr 来记录 modprobe 产生的错误
	记录类型是 LOG_DAEMON 级别是 LOG_NOTICE
	当 StdErr 不可用时，将会自动启用这个选项
	这个选项将通过 MODPROBE_OPTIONS 环境变量传递给 install 或 remove 的其他 模块

-v, --verbose
	详细输出
	这个选项将通过 MODPROBE_OPTIONS 环境变量传递给 install 或 remove 的其他 模块



Boot Loader: Grub2

boot loader 具有 启动选项、加载核心、移交控制权 等功能
但 MBR 仅有 446 bytes，GPT 也仅有不大的容量，如何写入这么多功能呢？

Linux 将 boot loader 的 程序 和 配置 分为两个阶段（stage） 来执行


Stage 1：执行 boot loader 的主程序

boot loader 的主程序必须安装在 MBR 或 boot sector
由于 MBR 仅有 446 bytes，所以其中的 boot loader 仅为最小化程序，不包含任何配置


Stage 2：boot loader 加载其他配置文件

boot loader 会加载所有的 配置文件 和 环境参数配置（包含 文件系统配置 和 主配置文件 grub.cfg）
一般来说，这些文件都放置在 /boot 目录下

如果使用 grub2 作为 boot loader，则它的配置文件都放置在 /boot/grub2/ 目录下
