主流 Linux 的发行版本使用的 Boot Loader 大多为 grub2

CentOS7 的开机流程概述
1. 加载 BIOS 中对于硬件的设置，并进行自我检测，接着获取第一个可开机的设备
2. 读取并执行第一个开机装置内的 boot loader（也就是 grub2 ）
3. 依据 boot loader 中的设置加载指定的 kernel 文件，kernel 开始检测硬件，并载入对应的驱动
4. 硬件驱动加载结束之后，kernel 会调用 systemd 程序，并以 default.target 定义的流程启动其他的程序
	<1> systemd 执行 sysinit.target 初始化系统，以及 basic.target 准备操作系统
	<2> systemd 执行 multi-user.target 下的本机服务和服务器服务
	<3> systemd 执行 multi-user.target 下的 /etc/rc.d/rc.local 文件
	<4> systemd 执行 multi-user.target 下的 getty.target 以及用户登录服务
	<5> systemd 执行 graphical.target 下的其他服务



BIOS,POST,MBR/GPT

开机第一步，载入 BIOS 并将 BIOS CMOS 中的硬件设置载入系统
硬件设置包含 各种硬件的工作频率、开机设备、磁盘大小和类型
					 系统时间、总线、PnP 设备、设备 IO 地址
					 CPU 的 硬件中断 指令
					 等等

接着进行 开机自我检测（POST,Power-On Self Test）
以及设置 可开机装置

通过 INT 13 中断 从可开机设备中读取 MBR 中的 Boot Loader


Boot Loader 的功能

<1> 提供启动选项，也即多重开机功能的界面
<2> 载入某系统对应的 loader，转交开机工作
<3> 也可直接载入 系统内核 来启动系统


！注： MBR 存在于硬盘的第一个扇区
	  系统的 loader 存在于系统分区的第一个扇区
	  系统的 kernel 可以存在在系统分区的任何一个扇区


kernel 的读取和系统启动

当 kernel 被载入之后，会接过 BIOS 的管理，并重新检测所有的硬件
在 Linux 中，kernel 文件一般为 /boot/vmlinuz*

eg.
[eP@ePCt ~]$ ls -F /boot

#返回

config-3.10.0-327.el7.x86_64							<= 该版本内核编译时启用的功能和模块的设置文件
grub/													<= 【已废弃】grub1 使用的文件夹
grub2/													<= grub2 使用的文件夹
initramfs-0-rescue-773a4477ef4d409cb280f237ffb5fd5a.img	<= 救援用 虚拟 文件系统 文件
initramfs-3.10.0-327.el7.x86_64.img						<= 正产启动时 使用的 虚拟 文件系统 文件
initramfs-3.10.0-327.el7.x86_64kdump.img				<= 出现问题时 使用的 虚拟 文件系统 文件
initrd-plymouth.img										<= 提供一个开机动画
symvers-3.10.0-327.el7.x86_64.gz						<= 模块编译时的记录文件存档
System.map-3.10.0-327.el7.x86_64						<= 内核变量在内存地址的映射表
vmlinuz-0-rescue-773a4477ef4d409cb280f237ffb5fd5a*		<= 救援时 使用的 内核文件
vmlinuz-3.10.0-327.el7.x86_64*							<= 正常启动时 使用的 内核文件

从 vmlinuz-3.10.0-327.el7.x86_64 中我们可以看到 我们使用的 系统的版本号是  3.10.0-327.el7.x86_64


对于非必须的功能，一般来说，Linux 的发行版本 将他们设计为独立的 内核模块（module），在系统启动时，会被 内核 加载至系统中
比如 USB、SATA、SCSI 等各种磁盘驱动程序都是 内核模块

内核模块一般保存在 /lib/modules/ 目录中，且 /lib 和 / 必须处在同一个分区中



## 为什么有 initramfs-*.img 的存在 ##

！更多说明见 man initrd

只有内核在载入了 与 磁盘 相关的 内核模块 之后，才能正常的读取 磁盘上 /lib/modules 中的内容
但是 SATA 这类 磁盘 相关的 内核模块 又是放置在 磁盘上的

initramfs（Initial RAM Filesystem）文件就是来解决这个死循环的

系统的 loader 除了可以将 kernel 加载至内存中，也可以将 initramfs 载入内存中，形成一个虚拟的 文件系统
这个虚拟的文件系统中，就包含了基础的 内核模块支持，比如 USB、RAID、LVM、SCSI 等文件系统和磁盘格式的支持

在完成了基础 内核模块的 载入之后，又会帮助 系统内核 调用 systemd 来接续启动系统


lsinitrd 查看 initramfs 包含的内容【img大小、Early CPIO内容、可用命令、包含文件】

lsinitrd [-s] [-f <filename>] [-k <kernel version>] [<image> [<filename> ...]]
-s, --size 依照文件大小排列 img 中的文件
-f, --file <filename> 打印出 img 中指定 文本文件 的内容
-k, --kver <kernel version> 通过 kernel version 来查找对应的 initramfs


EG.
lsinitrd /boot/initramfs-3.10.0-327.el7.x86_64.img
# 返回

Image: /boot/initramfs-3.10.0-327.el7.x86_64.img: 27M
========================================================================
Early CPIO image
========================================================================
drwxr-xr-x   3 root     root            0 Nov 23 14:51 .
-rw-r--r--   1 root     root            2 Nov 23 14:51 early_cpio
drwxr-xr-x   3 root     root            0 Nov 23 14:51 kernel
drwxr-xr-x   3 root     root            0 Nov 23 14:51 kernel/x86
drwxr-xr-x   2 root     root            0 Nov 23 14:51 kernel/x86/microcode
-rw-r--r--   1 root     root        12288 Nov 23 14:51 kernel/x86/microcode/GenuineIntel.bin
========================================================================
Version: dracut-033-360.el7_2.1

Arguments: --kver '3.10.0-327.el7.x86_64' -f

dracut modules:
bash
nss-softokn
i18n
network
ifcfg
...(省略)...
base
fs-lib
shutdown
========================================================================
drwxr-xr-x  12 root     root            0 Nov 23 14:51 .
crw-r--r--   1 root     root       5,   1 Nov 23 14:49 dev/console
crw-r--r--   1 root     root       1,  11 Nov 23 14:49 dev/kmsg
crw-r--r--   1 root     root       1,   3 Nov 23 14:49 dev/null
lrwxrwxrwx   1 root     root            7 Nov 23 14:49 bin -> usr/bin
...(省略)...
lrwxrwxrwx   1 root     root           23 Nov 23 14:51 init -> usr/lib/systemd/systemd
...(省略)...
drwxr-xr-x   3 root     root            0 Nov 23 14:51 var/lib
drwxr-xr-x   2 root     root            0 Nov 23 14:51 var/lib/lldpad
lrwxrwxrwx   1 root     root           11 Nov 23 14:49 var/lock -> ../run/lock
lrwxrwxrwx   1 root     root            6 Nov 23 14:49 var/run -> ../run
========================================================================



如果想解包 initramfs 文件，需要使用 dd 命令将 initramfs 映射为 gz 压缩包
同时要注意 Early CPIO image 是另一组数据，需要提前去除

【操作有疑问，已提问鸟哥，暂时忽略】
