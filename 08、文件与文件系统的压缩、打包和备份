Linux 中 打包 和 压缩 是两个概念
1、压缩：只能减少单个文件的大小，并提供解压缩方案
2、打包：将多个文件变成一个文件，并提供解包方案

打包文件常见后缀 .tar
压缩文件常见后缀 .Z .zip .gz .bz2 .xz

注意，在 Linux 中后缀名并不影响文件本身，只是作为人类可读的方式而存在



.gz 的压缩工具

gzip [-cdtv#] [文件]

-c, --stdout, --to-stdout 将压缩后的数据重导向至 standard out
-d, --decompress, --uncompress 无视后缀名，强制解压缩
-t, --test 测试压缩包完整性
-v, --verbose 输出各类参数
-<number>, --fast, --best 压缩级别（取值 1-9，默认 6）， <number> 越大，压缩率越大，压缩解压资源消耗越多

#! 注意！ gzip 在压缩/解压的时候，默认会删除原有文件

zcat/zless/zmore/zgrep 查看压缩文件的内容



.bz2 的压缩工具

bzip2 [-cdkzv#] [文件]

-c, --stdout 将压缩后的数据重导向至 standard out
-d, --decompress 无视后缀名，强制解压缩
-z, --compress 无视后缀名，强制压缩
-k, --keep 压缩/解压后保留原文件
-v, --verbose 输出各类参数
-<number> 压缩级别（取值 1-9 ）

bzcat/bzless/bzmore/bzgrep 查看压缩文件的内容



.xz 的压缩工具

xz [-cdkzv#] [文件]

参数同 bzip2



文件打包

tar [-z|j|J] <-c> [-v] [--exclude=<要排除文件>] <-f 新建的tar文件> <待处理的文件名1> [待处理的文件名2] ...
tar [-z|j|J] <-t> [-v] <-f 已有的tar文件>
tar [-z|j|J] <-x> [-v] [-C 目标目录] <-f 已有的tar文件> [需要单独解包的文件]

--{z|gzip}/{j|bzip2}/{J|xz} 调用 gzip/bzip2/xz 对文件压缩/解压
--{c|create}/{t|list}/{x|extract|get} 打包/罗列包内容/解包
-v, --verbose 显示详细信息
-f, --file=<ARCHIVE> tar文件名
-C, --directory=<DIR> 解包的位置

-p, --presver-premissions, --same-permissions 保留文件原有的属性
-P, --absolute-names 保留文件原有的绝对路径（解包将直接覆盖原文件）
--exclude=<filename> 不处理的文件名

#! 注意，不要将 tar -jcvf [filename] ，写成 tar -jcfv [filename] 后者的意思是将文件打包为名为 v 的文件
# 建议使用 tar -jcv -f [filename] 来明确打包的内容

# tar 不会删除原文件

# tar 中文件的路径头会直接使用 tar 命令中输入的位置

eg.

tar -cv -f newTar.tar ./soucedir/
tar -tv -f newTar.tar
#文件路径就会返回 ./sourcedir/<Blah...Blah...>


从 tar 包中解压指定的文件

tar [-jtv] [-f tar文件] | grep "<文件字段>"
# 预览 tar 包中指定字段的文件的完整路径
tar [-jxv] [-C 解压路径] [-f tar文件] [tar包内文件完整路径]



排除部分文件进行压缩

tar -jcv <-f tar文件名> --exclude=<要排除的文件名1> --exclude=<要排除的文件名2> ... [待处理文件]

--exclude=<FILE> 直接指定排除的 Pattern
-X, --exclude-from=<FILE> 从指定文件读取排除 Pattern



仅打包比某个时间要新的文件

--newer 测试所有时间类型
--newer-mtime 仅测试 mtime



tar 与 tarball

如果打包文件没有被压缩，习惯称为 tar 包
如果打包文件被压缩，习惯称为 tarball 包



XFS 文件系统的备份与还原

xfsdump xfsrestore


XFS 文件系统的备份

xfsdump [-L S_label] [-M M_label] [-l <number>] <-f 输出文件1> [-f 输出文件2] ... [原文件]
xfsdump -I

-L 写入 session 标签，与备份等级对应，一个备份等级对应一个 session
-M 写入 media 标签，与备份设备对应，一个备份文件对应一个 media
-l 指定备份等级，取值 0-9，0级为完全备份，1-9为补丁形式的备份
-f 生成的文件名
-I 从 /var/lib/xfsdump/inventory 列出备份的信息

#1 xfsdump 使用补丁式的方式添加备份，备份等级为 0 时，为完全备份
   备份等级为 1-9 时，每个级别都只备份与上个等级的文件差异

#2 xfsdump 的备份信息记录在 /var/lib/xfsdump/inventory



XFS 文件系统的还原

xfsrestore -I
xfsrestore [-f 备份文件] [-L S_label] [-s 需要单独恢复的文件] <恢复至的文件夹>
xfsrestore [-f 备份文件] -i <恢复至的文件夹>

-I 查看 /var/lib/xfsdump/inventory 下记录的备份信息
-f 备份文件位置
-L 要恢复的备份级别所对应的 session 标签
-s 只恢复指定的文件
-i 交互模式操作恢复



光盘镜像的创建、烧录
mkisofs、wodim

#注1：默认情况下，光盘镜像使用 ISO9660 文件系统，只支持 8字符文件名+3字符后缀名 的格式

无开机引导的数据光盘镜像的创建

mkisofs [-o ISO文件名] [-Jrv] [-V vol] [-m filenamePattern1] [-m filenamePattern2]...  [-exclude-list file]\
[-graft-points <ISODir1=SourceDir1> [ISODir2=SourceDir2] ...] <待加入镜像的文件1> [待加入镜像的文件2] ...

-o 输出的 ISO 文件名（未指定时输出为 stdout）
-J 使用 Joliet 来扩展文件名的支持，这项技术仅与 Windows 及 Linux 兼容，可支持长达 64 字符的 Unicode 字符作为文件名
-R, -rock 使用 Rock Ridge 来扩展文件名的支持
-r, -rational-rock 使用 Rock Ridge 来扩展文件名的支持，并自动修改文件部分属性与权限，以使其能在不同机器上正常使用
-v, -verbose 输出详细参数
-v -v, -verbose -verbose 输出更加详细的参数
-V volid 设定光盘镜像的卷标签
-m 按照设定的样式排除文件
-exclude-list 从指定的文件中读取排除文件的样式
-graft-points 修改文件路径，（测试失败，这个指令会导致文件被复制到新的路径下，而非修改至新的路径下）


可用作开机引导的镜像的制作-----测试失败，略过



光盘烧录------没有测试工具，略过

wodim



其他压缩备份资料的方法


dd 以数据块（block）作为单位 读取 转换 写入 数据 （data definition）

dd [OPERAND]...
dd <OPTION>
! dd 将以数据块或 newline 作为每一笔 记录（record） 的终止
bs=<BYTES>
	单个数据块读取和写入 <BYTES> 的字节
cbs=<BYTES>
	单个数据块转换 <BYTES> 的字节
conv=<CONVS>
	将字节在不同编码下转换（具体列表见下文 CONV 部分）
	无空格逗号作为多个参数的分隔
count=<N>
	仅操作 <N> 个输入的数据块
ibs=<BYTES>
	单个数据块读取 <BYTES> 的字节（默认 512）
if=<FILE>
	从文件 <FILE> 而非 StdIn 读取数据
iflage=<FLAGS>
	读入文件使用的标记（具体列表见下文 FLAG 部分）
	无空格逗号作为多参数的分隔
obs=<BYTES>
	单个数据块写入 <BYTES> 的字节
of=<FILE>
	写入文件 <FILE> 而非 StdIn
oflag=<FLAGES>
	写入文件使用的标记（具体列表见下文 FLAG 部分）
	无空格逗号作为多参数的分隔
seek=<N>
	输出时，略过 <N> 个 obs 参数中定义的数据块
skip=<N>
	读取时，略过 <N> 个 ibs 参数中定义的数据块
status=<LEVEL>
	输出至 StdErr 的信息级别
	“none” 除了 错误信息，其他都不输出
	“noxfer” 不显示 最后传输统计信息
	“progress” 显示每轮的传输统计

<N> 和 <BYTES> 可以使用以下单位：c=1, w=2, b=512,
							   kB=1000, K=1024,
							   MB=1000^2, M=1024^2,
							   GB=1000^3, G=1024^3,
							   同理： T P E Z Y

<CONV> 可用
	ascii		EBCDIC -> ASCII
	ebcdic		ASCII -> EBCDIC
	ibm			ASCII -> alternate EBCDIC
	block		将用 newline 结尾的数据块，用 NUL 填充至 cbs 规定的大小
	unblock		将 cbs 最后用 NUL 填充的数据块，用 newline 来替换
	lcase		大写转小写
	ucase		小写转大写
	sparse		输出时，跳过全 NUL 的数据块
	swab		传入每一个输入的字节（即便它没有成组）
	sync		用 NUL 将每个 读入的记录 填充至 ibs 定义的数据块大小
				若使用了 block 或 unblock 参数，则使用 空格 填充
	[下面是针对文件的 flag，和内部处理无关]
	excl		若输出文件已存在，则返回 操作失败
	nocreat		不要 新建 输出文件，输出文件必须已经存在
	notrunc		不要 截短 输出文件
	noerror		读取到错误也继续读取
	fdatasync	结束操作前，将数据 sync 至硬盘中
	fsync		结束操作前，不仅将数据 sync 写入硬盘中，也将 元数据（metadata）写入硬盘中

<FLAG> 可用
	append		附加模式，数据将会附加至文件尾部
	direct		不使用 缓存数据，而直接执行 I/O
	directory	除了 文件夹，对其他文件的操作都返回 失败
	dsync		使用 sync 过的数据
				对于 输出文件，这将强制让文件 sync 入硬盘
				对于 输入文件，这将处理不断被 sync 至本地的数据
	fullblock	对于输入的数据，
				若数据量不足以填充一个 block，就接着读取，直到填充满 block
	nonblock	使用 非阻断式 IO
	noatime		不要更新文件的 access time
	nocache		不对文件使用缓存
	nofollow	不要解析 符号链接
	count_bytes	将 count 部分解释为 字节数，而非 数据块数
	skip_bytes	将 skip 部分解释为 字节数，而非 数据块数
	seek_bytes	将 seek 部分解释为 字节数，而非 数据块数

将 SIGUSR1 送入 dd，可让 dd 将当前的 I/O 统计 输出至 StdErr，并继续剩下的操作



cpio -ovcB > [存档文件|存档设备]		备份数据
cpio -ivcdu < [存档文件|存档设备]		还原数据
cpio -ivct < [存档文件|存档设备]		查看备份

cpio 是一个借助 stdin 与 stdout 为界面的 备份/还原 命令

-o, --create 也就是 copy-out 模式，将数据拷贝至存档中
-B 将 data block 的大小设置为 5120 bytes，默认的 data block 大小为 512 bytes

-i, --extract 也就是 copy-in 模式，将备份的数据还原出来
-d, --make--directories 还原模式下，自动创建目录

-v, --verbose 输出详细信息
-c 使用 SVR4 格式 作为存档格式，该格式支持多于 2^16 个 inode






