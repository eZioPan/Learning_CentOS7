什么是 进程

一段存储在存储设备中的 二进制 文件，被读取至 内存 中，并提供给 CPU 执行，内存中的数据 就是 进程

进程 含有的内容

1、PID

也就是 Process ID，是 系统 赋予每个 进程 的 标识

2、执行该程序的 使用者/使用组 的 权限

3、程序执行所需要的代码与相关的资料



Linux 创建新进程的方式 fork-and-exec


步骤1

fork：从原进程调用 fork 命令，将原进程在内存中的数据完全复制出一份来，并赋予一个不同于 原进程的 PID
	这个新进程就被称为 子进程，而原始进程就被称为 父进程


步骤2

exec：从 子进程 中执行 exec 命令，将正真需要执行的代码载入内存，并替代 原始的 子进程 的 内存内容
	此时新的代码就继承了 原始的 子进程 的 PID，并正真执行所需要的命令



bash 环境下的工作管理（job control）

注意，在 CentOS 中，默认提供 7 个 tty 用户界面以供使用，每个 tty 在登录之后都会创建不同的 bash

下面所有的 工作管理，都是在 单一 的 bash 中使用的，也就是说 工作管理 不可以跨 tty 或者 bash 使用


在命令最后加上 & 符号，可以将该行的命令置入 bash 后台 执行

eg.
tar -zpcf /tmp/etc.tar.gz /etc &
# 立刻返回
# [1] 5342
# 表示，这是一个编号为 1 的 job，它对应的 PID 是 5342
# 一会儿后，会返回
# tar: Removing leading `/' from member names
# 这是 后台运行的 tar 程序的 StdOut 和 StdErr
# 再过一会儿，会返回
# [1]+ Done		tar -zpcf /tmp/etc.tar.gz /etc &
# 表示后台 工作编号为 1 的程序 已经完成



注意，若要将置于 bash 后台中运行的命令不将 StdOut 和 StdIn 显示在前台
可以使用 数据流重导向

eg.
tar -zpcvf /etc/etc.tar.gz /etc > /tmp/log.txt 2>&1 &



Ctrl+z 将前台的命令 暂停 运行，并置入后台



jobs 观察后台工作状态

jobs [-lrs]
-l 在列表末尾显示 PID
-r 只显示 状态为 Running 的 工作
-s 只显示 状态为 Stopped 的 工作


eg.
jobs -l
[1]- 14566 Stopped		vim ~/.bashrc
[2]+ 14567 Stopped		find / -print

# 加号 + 表示 默认情况下 首个 被 fg/bg 命令选择的 工作
# 减号 - 表示 默认情况下 第二 被 fg/bg 命令选择的 工作



fg bg 将任务置入 bash 前台/后台 执行

fg [[%]jobNumber]

bg [[%]jobNumber]

eg.

fg 1
# 等价于
fg %1

bg 1
# 等价于
bg %1



kill 结束一个进程

kill [-s <SIGNAL> | -<SIGNAL>] <PID| %<jobNumber>>
kill -l

-l 列出 kill 可以使用的 SIGNAL
-s 后面接 SIGNAL 的编号，或者 SIGNAL 的名称，也可直接忽略 -s 使用 -SINGAL 的形式
可以指定 PID 或 jobNumber 来指定进程


kill 常见的 SIGNAL 有以下几个
SIGNAL	SigName		Keyboard	Comment
1		SIGHUP					普通进程：告知 Session 结束，所有输出至该 Session 的进程结束（HangUp）
								系统服务进程：重读配置文件（HangUp）
2		SIGINT		Ctrl+C		键盘中断前台进程（Interrupt）
9		SIGKILL					中断进程（Kill）
15		SIGTERM					请求结束进程（Terminate）
20		SIGTSTP		Ctrl+Z		结束输入，进程转入后台，并暂停（Type Stop）

eg.

kill -9 %1
kill -SIGTERM 1234



nohup 指定将要忽略 SIGHUP 的命令

nohup [指令与参数] [&]

当用户登出 bash 时，系统 会发出 SIGHUP 命令来要求关闭以该 bash 作为输出端口的进程
但是 nohup 会让指定的进程忽略 SIGHUP 而一直执行

若 nohup 后接的指令的 StdOut 和 StdErr 都指向当前的 bash，则会将他们都重导向至 ./nohup.out 文件中



进程的观察

ps 命令（Process Snapshot）

ps -eljH
-e 罗列系统中正在执行的所有进程
-l 长列表输出
-j 工作的格式
-H 显示进程的层级关系


eg.

ps -l
# 返回
# F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD
# 0 S  1000  3280  3279  0  80   0 - 29141 wait   pts/0    00:00:00 bash
# 0 R  1000  5489  3280  0  80   0 - 37227 -      pts/0    00:00:00 ps

第一列 F 表示 Process Flags（二进制位 Mask），常见的有
	0 没有特殊的 Flag
	1 进程处于 forked 但 没有 exec 的状态
	4 进程是系统进程（具有 root 权限）
	5 同时具有 1 和 4 的 Flag

第二列 S 表示 程序状态（STAT），常见的有
	D 不可被打断的休眠状态（程序正在 IO）
	R 正在执行，或（在执行队列中）可被执行
	S 可被打断的休眠状态（等待某个事件被完成）
	T 停止状态，被工作控制信号暂停，或正在被追踪（debug）
	Z 僵尸进程，子进程结束，但父进程未回收子进程的返回信息，致使子进程有一部分未能移出内存

第三至五列 UID/PID/PPID 表示 该进程的 使用者 ID 、 进程 ID 、 父进程 ID

第六列 C 表示 CPU 使用率，单位 为 百分之一

第七至八列 PRI/NI 表示 Priority/Nice 即程序优先级

第九列 ADDR 表示 普通进程的进程栈的段号，内核进程的预处理数据地址

第十列 SZ 表示 进程占用的内存量

第十一列 WCHAN 表示 睡眠中或等待中的进程正在等待的事件

第十二列 TTY 表示 控制该进程的 终端机设备

第十三列 TIME 表示 该进程占用的 CPU 时间

第十四列 CMD 表示 出发该进程的指令是什么



top 连续观察系统状态

详细内容见文件 16补、top 命令的详细用法



pstree 进程树状图

pstree [-aAchHnpsuUZ] [pid,user]
-a, --arguments 显示命令内容而非进程名
-c, --compact 不使用同名缩写
-h, --highlight-all 高亮 当前进程 和其 父、子进程
-H <PID>, --highlight-pid=<PID> 高亮 指定进程 和其 父、子进程
-n, --numeric-sort 使用 PID 而非进程名进行排序
-s, --show-parents 默认仅显示指定进程的 子进程，该命令可以同时显示指定进程的 父进程
-u 当 某个进程 的 UID 与 父进程 的 UID 不同时，在该进程后显示 用户名
-A, --ascii 使用 ASCII 字符作为构成树状图的字符
-U, --unicode 使用 Unicode 字符作为构成树状图的字符


pstree 返回值解释

init-+-getty
     |-getty
     |-getty
     --getty

当一个 父进程 下 有同名的 子进程 的时候，会被缩写成

init---4*[getty]


init-+-{getty}
     |-{getty}
     |-{getty}
     --{getty}

当一个 进程 下 有同名的 子线程 的时候，会被缩写成

init---4*[{getty}]



killall 通过匹配指令名称来传递 SIGNAL

killall [-eIirsu] <commandName>
-e, --exact 只有完全匹配的命令才会被传入 SIGNAL
-I, --ignore-case 忽略大小写
-i, --interactive 提示用户是否结束某个进程
-r, --regexp 使用正则表达式来匹配命令
-s, --signal <SIGNAL> 指定传入的 SIGNAL
-u, --user [UserName] 仅对指定用户的程序传入 SIGNAL



Linux 系统的 进程执行优先级

Linux 内核会动态调整 进程的执行优先级（priority, PRI）
PRI 数值越低的，优先级越高


由于 PRI 是 Linux 内核动态分配的，所以用户不可以直接调整 PRI 值
但 用户可以通过调整 nice 值（NI） 来调整 优先级，计算公式

Priority(new) = Priority(initial) + nice

所以 任何一个显示的 PRI 值都是计算了当前 nice 值之后的结果

nice 值的调整规则

1、nice 值的取值范围为 -20~19
2、root 用户可以设置为 -20~19 的任意值
3、普通用户仅可以设定 自己的进程，而且只能调大 nice 值
4、nice 的计算都是基于进程在 Linux 内核中初始的 Priority 来计算的
eg.
[eP@ePCt~]$ renice +1 <某 PID>
[eP@ePCt~]$ renice +4 <某 PID>
# 获得的 <某 PID> 的最终的 NI 为 +4，而非 +5



nice 设置一个命令的初始 nice 值

nice [-n <nice 值>] [command]
-n, --adjstment=N 为即将执行的进程添加 nice 值，默认为 +10



renice 为一个已经运行的进程重新设置 nice 值

nice [-n] <nice 值> [-u <UID>] [-p] <PID>
-n, --priority <nice 值> 调整 nice 值，作为首位输入的参数，可以省略 -n
-u, --user <userName>|<UID> 指定用户
-p, --pid <PID> 指定进程编号



free 内存用量
free [[-b|k|m|g|tera]|[-h]] [-t] [-s <间隔秒数>] [-c <输出次数>]
-b|k|m|g|tera 指定显示单位
-h 人类可读大小
-t, --total 显示总计数
-s, --seconds 多次刷新的间隔数
-c, --count 多次刷新的总次数



uname 查看系统信息



dmesg 查看核心 log



netstat 查看网络信息



vmstat 查看系统资源
vmstat [-afsd] [-S <使用单位>] [-p <分区>] [取样间隔时间] [取样次数]
-a, --active 使用活跃与否表示内存状态
-f, --forks 统计本次开机后，系统的总 fork 数量
-s, --stats 显示发生的事件和内存的统计
-S, --unit <单位> 用 k(1000bytes),K(1024bytes),m(1000k),M(1024K) 作为显示单位
-d, --disk 显示磁盘统计
-p, --partition <dev> 显示分区统计

vmstat 具体的返回内容可以查询帮助



SUID 和 SGID 的真实含义，就是在 fork-and-exec 的 exec 阶段，系统会调用 setuid() 来重新制定 UID



/proc 目录，用于提供一种方式来访问和修改内核的数据

/proc 是一个 伪目录，它使用名为 procfs 的 伪文件系统，它只存在于 内存 中，并不占用 存储设备资源

/proc 目录下，有很多以纯数字开头的 文件夹，它们就是 进程 PID 对应的 内核目录


/proc/[pid]/ 目录下，有一些文件和目录

attr		（目录）进程的安全性设置
cmdline 	（只读）调用该进程的 完整命令
comm		与该进程对应的 进程名
cwd			（符号链接）进程的 工作路径
environ 	该进程的 环境变量（用 null 字节（\0） 隔开）
exe			（符号链接）进程实际执行的 命令 的路径
fd			（目录）程序打开的文件
			0/1/2 分别代表 StdIn/StdOut/StdErr，其他的数字指向正在使用的其他文件
fdinfo		（目录）打开文件的信息
io			IO 统计
limits		进程能够调用的系统资源的限制信息
map_files	（目录）内存地址映射的文件
maps		内存映射的相关属性
mem			用于读写 进程的内存
mountinfo	当前进程所在 namespace 的所有的挂载信息
mounts		当前进程所在 namespace 的已挂载的信息
...... （太多，略）...... 【详见 man 5 proc】


/proc 非 数字 的文件/文件夹 都是系统本身所使用
主要的文件/文件夹

cmdline		加载 kernel 的时候使用的指令
cpuinfo		查询与 CPU 相关的信息
devices		设备的 主装置号（mknod 命令相关）
filesystems	被系统所支持的 文件系统，若 某文件系统 被标记为 nodev，说明当前没有设备使用该 文件系统
interrupt	当前 IRQ 分配状态
ioports		已分配的 <Input>-<Output> 端口对
kcore		代表 内存 的 伪文件，大小为真实内存大小
			系统 debug 工具可以通过这个工具 查看内存状况
loadavg		系统平局负载，分别为
			1/5/15分钟 CPU 平均负载; 正在运行的进程数/当前进程数总计; 最近一次创建的 PID
meminfo		内存使用情况
modules		已经载入内核的 模块
mounts		内核自身挂载的内容（符号链接至 /proc/self/mounts）
swaps		系统 swap 所在分区
partitions	系统中 块设备的 主次设备号/块数量/设备名
uptime		系统总计运行秒数/CPU核心总空闲秒数
			*每个CPU核心都会累计计算空闲状态
version		系统版本
bus/*		系统总线 信息



fuser 找出 正在使用 某文件/文件夹 的进程

fuser [-uv] [-a|s] [-4|6] [-m|n <Name>] [-k [-iMw] [-SIGNAL] ] <name1> <name2> ...
-u, --user 列出 PID 的同时，列出进程所有者的 名称
-v, --verbose 复杂输出，显示
						1、指定文件/文件夹所在的绝对路径
						2、当前正在使用的该文件/文件夹的 用户名
						3、当前正在使用该文件/文件夹的 PID
						4、以何种“权限”使用该文件（详见下文）
						5、使用该文件/文件夹的程序名
-a, --all 默认情况下，若一个文件/文件夹不被任何一个进程使用，则不显示该文件/文件夹，这个参数会让所有的文件/文件夹都显示出来
-s, --silence 静默模式，仅执行操作，不返回任何显示
-m, --mount <name> 指定一个文件/文件夹/块设备，任何进程，只要调用了与 所指定的文件/文件夹/块设别 所在的 文件系统 中的任意 文件/文件夹，都会被罗列出来
					若 <name> 指定为一个文件夹，则 工作目录 会立即移动至该目录
-M, --ismountpoint <name> 仅当 <name> 为 挂载点时，该指令才有效
-k, --kill 若不用 -SIGNAL 指定 新的 SIGNAl，该参数将试图对使用指定文件的进程传入 SIGKILL
-i, --interactive 交互模式，在 杀死任何一个进程 之前都提示用户确认
-w 仅当 -k 存在时起效，只杀死会写入指定文件的进程
-n, --namespace <Space> 切换至其他的命名空间
-SIGNAL 仅当 -k 存在时起效，传入其他的 SIGNAL
-4, --ipv4 使用 IPv4 套字节
-6, --ipv6 使用 IPv4 套字节


fuser 中的显示的几种“权限”

c	当前目录
e	正在运行的可执行文件
f	已打开的文件
F	已打开，且用于写入的文件
r	系统根目录
m	已被映射至内存的文件 或 公用的库

这些权限默认紧随 PID 之后



lsof 罗列被开启的文件

lsof [-a] [-u <用户名>] [+d <目录>]

在 lsof 不加任何参数的情况下，会罗列当前所有处于开启状态的文件
-a 复合条件时，需要同时满足所有条件才会被罗列
-u 仅罗列某用户开启的文件
+d 仅寻找指定目录下被开启的文件



pidof 找出正在运行的程序的 PID

pidof [-sx] <程序名1> <程序名2> ...
-s 仅列出找到的第一个 PID
-x 同时列出 PPID



SELinux

SELinux 全称 Security Enhanced Linux，中文译名 安全强化型 Linux


传统权限管理 —— DAC

DAC 全称 Discretionary Access Control，中文译名 自主式读写控制

DAC 即是，依据 程序使用者 的权限与 文件内记载 的权限 进行对比，来决定程序对文件的读写权限

DAC 的问题：
（1） DAC 对已经获取了 root 权限的账户完全无效，也就是说， root 不受 DAC 的控制
（2） 用户可以通过 特定程序 修改 某个文件 所有的权限，也就是说，错误的权限设置会让系统出现权限漏洞


以策略规定的文件读写规则 —— MAC

MAC 全称 Mandatory Access Control，中文译名 委托式读写控制

MAC 会为 每类 文件（几乎是每个文件）、每类 进程（几乎是每个进程）定义一个独特的 Type
所有的 Type 和其中 两两对应的 权限关系 组成了一个巨大的矩阵
当需要的时候，就会从矩阵中计算出对应的权限



SELinux 的 6 个基本概念

【1】 User
对应的是 SELinux user，这个字段一般以 _u 作为后缀
它和系统账户中的 user 并不同
SELinux user 在一个 user session 中不会改变，即便使用了 sudo 或 su 命令
一般来说，多个 Linux 系统账户会使用同一个 SELinux user

常见的 SELinux user 有两种

unconfined_u	不受限用户，基本上就是 使用者 创建的文件，或 使用者 启动的进程
system_u		系统用户，基本上就是 系统 创建的文件，或 系统 启动的进程


【2】 Role
对应的是 SELinux role，这个字段一般以 _r 作为后缀
一个 SELinux user 会具有一个或多个 SELinux role
SElinux role 的具体内容由 Policy（策略）来决定
role 可以是一个 没有优先权的用户、一个网站管理员、一个数据库管理员 等等

常见的 SELinux role 有三种

unconfined_r	不受限角色，也就是不受 SELinux 管控的状态
system_r		系统角色，可能会受到 SELinux 的管控
object_r		对象角色，一般附在文件的属性之中，基本上就是一个占位的作用


【3】 Type
一个 type 是 定义权限 的主要手段，这个字段一般以 _t 作为后缀
一个 进程的 type ，被称为 进程的 域（domain）

各类进程 和 系统文件 都有各自不同的 type


【4】 Context
每个 进程和对象（object）都有一个 context（或称一个 label）
这个属性用于定义 一个进程 是否可以读写 一个物体

这个 context 又被称为 Security Context

一个 context 的格式：
<user>:<role>:<type>[:<range>]

其中 <user> <role> <type> 字段与上述的三个内容对应
<range> 用于 Multi Level Security 的全局策略之下，是一个可选项

文件 的 Context 被记录在对应的 inode 中
进程 的 Context 被记录在对应的 /proc/[PID]/attr/current 文件中


【5】 Object Class
一个 Object 可以指代 Linux 中任何一个实体
比如：一个文件、一个文件夹、一个进程、或者是一个 套字节连接


【6】 Rule
SELinux 的规则是由 进程 和 object 的 type 决定的

一个 AVC rule 的样式

<rule_name> <source_type> <target_type> : <class> <perm_set>

<rule_name> 包含 allow/dontaudit/auditallow/neverallow
<source_type> 和 <target_type> 写入对应的 type 可以使用 {} 表示多个 type
								或其他符号 表示 排除（-） 通配（*） 补集（~）
<class> 也就是 Object class 指明作用的对象是那种类别
<per_set> 等价于将要执行的操作（etc.读取/写入/删除/开启端口/关闭端口）



SELinux 的运行机制

启动一个 二进制文件，二进制文件的 type 会决定 启动的 进程 所对应的 type，
该 进程的 type 又会决定 该进程能够对 具有哪些 type 的 文件（这些 type 被称为 进程的 domain） 进行何种操作（etc.读/写/删/断开）

<1> 一个 Subject（eg.进程） 需要读写一个 Object（eg.文件）
<2> 内核检查 AVC（Access Vector Cache） 中缓存的记录
--<1> 若 AVC 中有该记录
----<1> 该 AVC 记录指明 该 Subject 可以读写 该 Object，则 SELinux 放行，并进程 传统的 DAC 检查
----<2> 该 AVC 记录指明 该 Subject 不可读写 该 Object，则 AVC 返回 Denied Message
--<2> 若 AVC 中没有该记录
----<1> 在 SELinux 的 Policy 数据库中查询记录，并缓存至 AVC 中，再次进行 AVC 判断


进程 和 文件 的 SELinux Security Context 的查询

ps -Z	查询进程的 Security Context
ls -Z	查询文件的 Security Context



SELinux 的 全局策略（全局 Policy）

在 /etc/selinux/config 文件中设置

(1)	SELINUX		设置 SELinux 的启动状态，分别为
	enforcing	使用 SELinux 控制 进程权限
	permissive	仅使用 SELinux 检测权限，并在不符合时发出警告，但不限制 进程权限
	disable		完全关闭 SELinux

(2) SELINUXTYPE	设置 SELinux 的全局策略
	targeted	限制被标记的程序（大多限制网络服务，本地程序的限制比较少）
	minimum		targeted 策略的修改版。仅限制被选择的程序
	mls			Multi Level Security 保护。一种严格的限制策略



getenforce 查看当前 SELinux 的启动状态

可能的返回值有
enforcing
permissive
disable



sestatus 查看 SELinux 完整的运行状态

sestatus [-vb]
不加任何参数时，输出 SELinux 的各项状态
-v 附加上 /etc/sestatus.conf 中指定的 文件 或 进程的 Security Context
   若 指定的 文件 是一个 符号链接，则同时显示 符号链接文件 和 目标文件 的 Security Context
-b 附加上 策略 在当前的启动状态（policy boolean）

sestatus 返回值的含义

SELinux status:                 enabled				# 系统是否启动了 SELinux
SELinuxfs mount:                /sys/fs/selinux		# SELinux 的文件系统的挂载点
SELinux root directory:         /etc/selinux		# SELinux 的根目录
Loaded policy name:             targeted			# 当前使用 SELinux Policy
Current mode:                   enforcing			# 当前 SELinux 的运行状态
Mode from config file:          enforcing			# SELinux 设置文件中定义的 SELinux 运行状态
Policy MLS status:              enabled				# Multi Level Security 的状态
Policy deny_unknown status:     allowed				# 是否阻止未知的 Subject 进程
Max kernel policy version:      28					# 当前 SELinux Policy 的版本号



注意！若 SELinux 要在 开启（Enforce 或 Permissive）和禁用（Disable）之间切换，必须重启电脑
且当 SELinux 从 禁用状态 切换至 开启状态时，需要重启两次
第一次重启后，SELinux 会执行 SELinux Relabel 来重新写入 Security Context
第二重启之后，SELinux 才会完全正常的工作


若重启为 Enforcing 状态后，出现系统服务错误，可以切换至 Permissive 模式，
接着输入 restorecon -Rv / 来还原所有的 SELinux 标签
然后重新进入 Enforcing 的状态即可



setenforce 在 Permissive 模式 和 Enforcing 模式下切换

setenforce  <Enforcing>|<Permissive>|<1>|<0>
设置为 Enforcing 或 1 时，切换为 Enforcing 模式
设置为 Permissive 或 0 时，切换为 Permissive 模式



getsebool 查询 Rule 的是否启动

getsebool [-a] [特定规则名]
-a 罗列 SELinux 所有的 规则，并显示其是否开启



seinfo sesearch 查询 SELinux Type 的详细信息

注意！seinfo 和 sesearch 两个命令并没有内置在系统中，需要安装 setools-console 才可以使用

yum install setools-console


seinfo [-tarub] [-x] [--all]
--all 这个参数会罗列 SELinux 所有的状态、规则、身份、角色、对象等全部条目
-x, --expand 扩展显示，与下方的参数搭配使用
-t[NAME], --type[=NAME]
	显示所有的 type，或 指定的 type 的名字
	若使用 -x，显示所有包含该 type 的 attribute
-a[NAME], --attribute[=NAME]
	显示所有的 attribute，或 指定的 attribute 的名字
	若使用 -x，显示 attribute 包含的所有的 type
-r[NAME], --role[=NAME]
	显示所有的 role，或 指定的 role 的名字
	若使用 -x，显示 role 包含的所有的 type
-u[NAME], --user[=NAME]
	显示所有的 user，或 指定的 user 的名字
	若使用 -x，显示 user 包含的所有的 role
-b[NAME], --bool[=NAME]
	显示所有的 条件 boolean，或 指定的 条件 boolean 的名字
	若使用 -x，显示 条件 boolean 默认的启动状态


sesearch <-A...> [-s <NAME>] [-t <NAME>] [-c <NAME>] [-b <NAME>]
-A, --allow 显示被标记为 allow 的 Rule
--neverallow 显示被标记为 neverallow 的 Rule
--auditallow 显示被标记为 auditallow 的 Rule
-D, --dontaudit 显示被标记为 auditallow 的 Rule

-s <NAME>, --source=<NAME>	搜索 SELinux Rule 中， source 字段为 <NAME> 的条目
-t <NAME>, --target=<NAME>	搜索 SELinux Rule 中， target 字段为 <NAME> 的条目
-c <NAME>, --class=<NAME>	搜索 SELinux Rule 中， Object Class 字段为 <NAME> 的条目
-b <NAME>, --bool=<NAME>	搜索 SELinux Rule 中， Rule 名称 为 <NAME> 的条目
