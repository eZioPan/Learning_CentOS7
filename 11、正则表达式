正则表达式分为 基础正则表达式 和 扩展正则表达式

语系的设置对正则表达式输出的结果又很大的影响

因为不同语系对于字符的排列方式是不一样的

下面的一些符号将在不同的语系之下对应相同的字符，请注意


符号		含义
[:alnum:]	大小写英文字母 + 阿拉伯数字
[:alpha:]	大小写英文字母
[:blank:]	空格键 和 Tab 键
[:cntrl:]	键盘上的控制键，比如 CR, LF, Tab, Del 等等
[:digit:]	阿拉伯数字
[:graph:]	除了 空格键 和 Tab 键 之外的其他键
[:lower:]	小写英文字母
[:print:]	可以被打印出来的字符
[:punct:]	标点符号，比如 " ' ? ! ; : # $ 等等
[:upper:]	大写英文字母
[:space:]	会产生空白的字符，比如 空格键， Tab键， CR 等等
[:xdigit:]	十六位字符，包含 0-9 a-f A-F



grep 的进阶选项
grep [-AB] [--color=auto] <需匹配的字符串> [文件名]
-A <num> 将匹配所在位置向后（after）的 n 行也列出来
-B <num> 将匹配所在位置向前（before）的 n 行也列出来



RE 的语法



[字符]

中括号：待搜索项 至少出现 一次 中括号中的 某个 字符

eg.

grep 't[ae]st'

搜寻 含有 tast 或者 test 的行



[^字符]

中括号里有 ^ ：待搜索项里 不包含 括号中的 某个 字符

eg.

grep '[^g]oo'

那么不会标注 'google'，但会标注 'gooogle'，因为最后两个 o 的前面是 o ，不是 g



[字符1-字符2]

中括号里有 - ：待搜索项里包含 字符1 至 字符2 之间的任意一个字符

eg.

grep '[a-z]' 等价于 grep '[abcdefghijklmnopqrstuvwxyz]'

注意这个匹配的最终内容和系统编码相关

上述内容最好写成

gerp '[[:lower:]]'



^ 和 - 可以连用

eg.

grep '[^[:lower:]]'

表示 去除仅有小写字母的行



^字符

在方括号外使用，表示后面的字符出现在行首

eg.

grep '^[^[:upper:]]'

表示去除 以大写英文字母开头的行



字符$

表示以字符作为行结尾

eg.

grep '\.$'

将搜索已英文句号为结尾的行

由于 英文句号 . 在 RE 中有特殊的含义，所以用 反斜线 \ 来进行转义

但要注意，由于 Windows 的换行符为 <CR><FL> 而 <CR> 在 Linux 表示为 ^M
所以用 Linux 处理 Windows 文件时，一定要注意每行是以 ^M 结尾的



.

有且只有一个 任意字符

eg.

grep 'g..d'

将选出 g 在 d 前，且两者之间恰好含有两个字符的行



字符*

该字符重复 0 至 任意多次

eg.

grep 'o*'

看起来这将选择连续出现 o 这个字符的行，实际上会选择所有行
因为 * 可以匹配 0 次重复

正确写法

grep 'oo*'

首先匹配含有一个 o 的字符，紧跟其后的是 0 个或多个 o





