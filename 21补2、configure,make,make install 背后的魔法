翻译自：
https://robots.thoughtbot.com/the-magic-behind-configure-make-make-install


若你使用过任何种类的 Unix 系统用于开发，那么你可能已经用下面的魔咒来从源码安装软件


./configure
make
make install


我知道我已经把它们输入过好多遍了，但在我使用 Linux 的早些时候，我并不真的理解它们意味着什么，
我仅知道若我想安装软件，那就按照这个来就好了

最近我开始构建我自己的 Unix 工具，而且我也想利用这个标准安装流程；
这不仅仅是因为很多 Unix 用户对它很熟悉，同时，也是为 Homebrew 和各种 Linux 以及 BSD 包管理器构建包的良好起点
是时候一头扎入 Unix 的魔法书来寻找这些咒语到底是什么意思了



所有这些到底都在干什么？


该过程有三个完全不同的步骤：


1、配置软件

configure 脚本用于在你特定的系统上准备好构建软件
它保证了其后的构建和安装过程中需要的依赖都是可用的，
也找出使用这些依赖所需要知道的任何内容

Unix 软件通常用 C 写成，所以我们通常需要一个 C 编译器来编译它们
在这些情况下 configure 脚本将确认的你同种的确具有一个 C 编译器，并找到它叫什么，以及何处能找到它


2、构建软件

一旦 configure 完成了它的工作，我们可以调用 make 来构建软件
它运行一系列在 Makefile 中定义的操作从源码构建出最终的程序

你下载的 tarball 中通常并不包含最终的 Makefile 文件
相反，它通常包含一个被称为 Makefile.in 的模板，以及用于生成你系统特定的 Makefile 的 configure 脚本


3、安装软件

现在软件就构建完成，且已经可以运行了，文件就可以被拷贝至最终的目标了
make install 冰灵将拷贝构建好的程序，以及它的库和文档，至正确的地方

这通常意味着程序的二进制文件将被拷贝至你 PATH 定义的目录中，
程序的用户手册将被拷贝至的你 MANPATH 定义的目录中，
其它任何被它依赖的文件都将被安全地存储在正确的位置

由于安装步骤也同样被定义在 Makefile 中，而软件安装的位置可以基于传入 configure 脚本的参数来修改，
或者 configure 脚本从你系统中发现的东西

基于软件被安装的位置，你可能需要为这个步骤提权，这样你可以拷贝文件至系统目录中
使用 sudo 通常就可以了



这些脚本来自哪里


所有这些工作都是由于 configure 脚本价差了你的系统，并用它找的信息将 Makefile.in 模板转换为 Makefile，
但 configure 脚本和 Makefile.in 模板又来自哪里呢？


若你打开过一个 configure 脚本，或关联的 Makefile.in，你应该已经见过了它们包含上千行密密麻麻的 shell 脚本
有些时候这些支持脚本比它们所安装的程序的源码还要长

即便是从一个现有的 configure 脚本开始，手动构建一个也是非常让人却步的
别担心，这些脚本都不是手动编辑的

用这种方法编译的程序通常使用一些列被统称为 autotools 的工具打包
这套工具包含 autoconf automake 以及很多其他工具，所有这些工具共同工作让软件维护者的生活简单了很多
终端用户不会看到这些工具，但它们免去了在各类不同的 Unix 上配置和安装过程的痛苦



Hello world


让我们选用一个简单的 “Hello world” C 程序，然后看一看用 autotools 如何将其打包

这里是程序的源码，放在一个被称为 main.c 的文件中：


#include <stdio.h>

int
main(int argc, char* argv[])
{
	printf("Hello world\n");
	return 0;
}
